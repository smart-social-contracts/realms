name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.PAT_GITHUB }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bumpversion semver build twine
      
      # Bump version
      - name: Bump version
        id: bump_version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create version file if it doesn't exist
          if [ ! -f "version.txt" ]; then
            echo "0.1.0" > version.txt
          fi
          
          # Calculate new version with Python
          CURRENT_VERSION=$(cat version.txt)
          NEW_VERSION=$(python -c "import semver; v=semver.VersionInfo.parse('${CURRENT_VERSION}'); print(v.bump_${{ github.event.inputs.release_type || 'patch' }}())")
          
          # Update version file
          echo "${NEW_VERSION}" > version.txt
          
          # Update CLI version
          sed -i "s/version = \".*\"/version = \"${NEW_VERSION}\"/" cli/pyproject.toml
          sed -i "s/__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" cli/realms_cli/__init__.py
          
          # Store new version for later use
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
      
      # Pull and tag the Docker images
      - name: Pull and tag Docker images
        run: |
          # Pull the latest Docker image
          docker pull ghcr.io/${{ github.repository_owner }}/realms:latest
          
          # Tag with version number
          docker tag ghcr.io/${{ github.repository_owner }}/realms:latest \
            ghcr.io/${{ github.repository_owner }}/realms:v${{ steps.bump_version.outputs.NEW_VERSION }}
          
          # Push the versioned tag
          docker push ghcr.io/${{ github.repository_owner }}/realms:v${{ steps.bump_version.outputs.NEW_VERSION }}
          
          echo "✅ Docker image tagged and pushed: v${{ steps.bump_version.outputs.NEW_VERSION }}"
      
      - name: Extract canister artifacts
        run: |
          # Create directory for artifacts
          mkdir -p artifacts

          # Build canisters and extract WASM/DID files
          docker run --rm \
            -v "$(pwd)/artifacts:/artifacts" \
            ghcr.io/${{ github.repository_owner }}/realms:latest \
            bash -c "dfx start --background --clean && \
                    dfx canister create --all && \
                    dfx build --all && \
                    cp .dfx/local/canisters/realm_backend/realm_backend.wasm.gz /artifacts/ && \
                    cp .dfx/local/canisters/realm_backend/service.did /artifacts/realm_backend.did && \
                    cp .dfx/local/canisters/realm_registry_backend/realm_registry_backend.wasm.gz /artifacts/ && \
                    cp .dfx/local/canisters/realm_registry_backend/service.did /artifacts/realm_registry_backend.did && \
                    dfx stop"
          
          # Move artifacts to root for release
          mv artifacts/realm_backend.wasm.gz ./
          mv artifacts/realm_backend.did ./
          mv artifacts/realm_registry_backend.wasm.gz ./
          mv artifacts/realm_registry_backend.did ./
          
          echo "✅ Canister artifacts extracted"
      
      - name: Build and publish CLI to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd cli
          
          # Verify version consistency
          PYPROJECT_VERSION=$(grep -Po '^version = "\K[^"]*' pyproject.toml)
          INIT_VERSION=$(grep -Po '(?<=__version__ = ")[^"]*' realms_cli/__init__.py)
          
          echo "Version in pyproject.toml: $PYPROJECT_VERSION"
          echo "Version in __init__.py: $INIT_VERSION"
          
          if [ "$PYPROJECT_VERSION" != "$INIT_VERSION" ]; then
            echo "ERROR: Version mismatch"
            exit 1
          fi
          
          # Build and publish
          python -m build
          twine check dist/*
          twine upload dist/*
          
          echo "✅ CLI published to PyPI: v${{ steps.bump_version.outputs.NEW_VERSION }}"
      
      # Commit version changes
      - name: Commit and push version changes
        run: |
          git add version.txt cli/pyproject.toml cli/realms_cli/__init__.py
          git commit -m "Bump version to ${{ steps.bump_version.outputs.NEW_VERSION }}"
          git tag -a "v${{ steps.bump_version.outputs.NEW_VERSION }}" -m "Release v${{ steps.bump_version.outputs.NEW_VERSION }}"
          git remote set-url origin https://${{ secrets.PAT_GITHUB }}@github.com/${{ github.repository }}.git
          git push origin
          git push origin --tags
      
      # Create GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.NEW_VERSION }}
          name: Release v${{ steps.bump_version.outputs.NEW_VERSION }}
          generate_release_notes: true
          files: |
            realm_backend.wasm.gz
            realm_backend.did
            realm_registry_backend.wasm.gz
            realm_registry_backend.did
          body: |
            # Release v${{ steps.bump_version.outputs.NEW_VERSION }}
            
            This release includes:
            
            ## 📦 Release Assets
            
            ### 🐳 Docker Image
            ```bash
            docker pull ghcr.io/${{ github.repository_owner }}/realms:v${{ steps.bump_version.outputs.NEW_VERSION }}
            # or use :latest for the most recent release
            docker pull ghcr.io/${{ github.repository_owner }}/realms:latest
            ```
            
            ### 🔧 Canister Artifacts (WASM + DID)
            - `realm_backend.wasm.gz` + `realm_backend.did` - Main backend canister
            - `realm_registry_backend.wasm.gz` + `realm_registry_backend.did` - Registry backend canister
            
            ### 📦 CLI Tool (PyPI)
            ```bash
            pip install --upgrade realms-cli==${{ steps.bump_version.outputs.NEW_VERSION }}
            ```
            
            ### 📁 Source Code
            - Source code (zip)
            - Source code (tar.gz)
            
            ## Installation
            
            **Deploy Canisters:**
            ```bash
            # Download the .wasm.gz and .did files
            dfx deploy --network ic
            ```
            
            **Run Docker Image:**
            ```bash
            docker run -it ghcr.io/${{ github.repository_owner }}/realms:v${{ steps.bump_version.outputs.NEW_VERSION }}
            ```
            
            **Install CLI:**
            ```bash
            pip install realms-cli==${{ steps.bump_version.outputs.NEW_VERSION }}
            ```
            
            ## Commit
            ${{ github.sha }}
