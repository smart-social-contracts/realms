name: 1. Build and Test (main)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      canister:
        description: 'Canister to deploy (leave empty for all)'
        required: false
        default: ''

jobs:
  build:
    # Skip this workflow if the commit message contains "Bump version"
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Insert commit hash and datetime
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          sed -i "s/COMMIT_HASH_PLACEHOLDER/$COMMIT_HASH/g" src/realm_backend/api/status.py
          sed -i "s/COMMIT_HASH_PLACEHOLDER/$COMMIT_HASH/g" src/realm_frontend/src/app.html

          COMMIT_DATETIME=$(git log --format="%cd" --date=iso8601 -1)
          sed -i "s/COMMIT_DATETIME_PLACEHOLDER/$COMMIT_DATETIME/g" src/realm_frontend/src/app.html

          VERSION=$(cat version.txt)
          sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" src/realm_backend/api/status.py
          sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" src/realm_frontend/src/app.html
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Clean Docker environment
        run: |
          # Remove any dangling images/layers to prevent cache contamination
          docker system prune -f --filter "until=24h"
          echo "✅ Docker environment cleaned"
      
      - name: Build and push base Docker image (without extensions)
        run: |
          # Build base image with no cache for reliable, reproducible builds
          docker build \
            --no-cache \
            --pull \
            --target base \
            -t ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }} \
            -t ghcr.io/${{ github.repository_owner }}/realms:latest \
            .
          
          # Push both tags
          docker push ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/realms:latest
      
      - name: Build and push demo Docker image (with extensions)
        run: |
          # Build demo image with no cache for reliable, reproducible builds
          docker build \
            --no-cache \
            --pull \
            --target demo \
            -t ghcr.io/${{ github.repository_owner }}/realms:demo-${{ github.sha }} \
            -t ghcr.io/${{ github.repository_owner }}/realms:demo-latest \
            .
          
          # Push both tags
          docker push ghcr.io/${{ github.repository_owner }}/realms:demo-${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/realms:demo-latest
      
      - name: Verify Docker images
        if: always()
        run: |
          mkdir -p build-logs
          # Check if the base image was built successfully
          if docker image inspect ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }} >/dev/null 2>&1; then
            echo "✅ Base Docker image built successfully"
            docker images | grep ${{ github.sha }} || true
          else
            echo "❌ Base Docker image build failed"
            echo "Base Docker build failed" > build-logs/build-failed.txt
          fi
          # Check if the demo image was built successfully
          if docker image inspect ghcr.io/${{ github.repository_owner }}/realms:demo-${{ github.sha }} >/dev/null 2>&1; then
            echo "✅ Demo Docker image built successfully"
            docker images | grep demo-${{ github.sha }} || true
          else
            echo "❌ Demo Docker image build failed"
            echo "Demo Docker build failed" > build-logs/demo-build-failed.txt
          fi
      
      - name: Save build metadata
        if: always()
        run: |
          echo "Commit: ${{ github.sha }}" > build-logs/build-info.txt
          echo "Image: ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }}" >> build-logs/build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> build-logs/build-info.txt
          echo "Timestamp: $(date -u)" >> build-logs/build-info.txt
      
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-main
          path: build-logs/
          retention-days: 7

  test:
    runs-on: ubuntu-latest
    needs: build
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Wait for Docker image to be available
        run: |
          # Wait up to 5 minutes for the Docker image to be available
          for i in {1..30}; do
            if docker pull ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }}; then
              echo "Docker image is available"
              break
            else
              echo "Waiting for Docker image... (attempt $i/30)"
              sleep 10
            fi
          done
      
      - name: Run linting checks
        run: |
          mkdir -p lint-logs
          # First fix formatting issues
          docker run --rm ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }} ./scripts/run_linters.sh --fix > lint-logs/lint-fix.log 2>&1 || true
          # Then verify all issues are fixed
          docker run --rm ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }} ./scripts/run_linters.sh > lint-logs/lint-check.log 2>&1 || true
      
      - name: Upload lint logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-logs-main
          path: lint-logs/
          retention-days: 7
  
  test-extensions:
    runs-on: ubuntu-latest
    needs: build
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Wait for Docker image to be available
        run: |
          # Wait up to 5 minutes for the Docker image to be available
          for i in {1..30}; do
            if docker pull ghcr.io/${{ github.repository_owner }}/realms:demo-${{ github.sha }}; then
              echo "Docker image is available"
              break
            else
              echo "Waiting for Docker image... (attempt $i/30)"
              sleep 10
            fi
          done
      
      - name: Run extension tests
        run: |
          docker run --rm \
            -v "$(pwd)/extension-logs:/app/extension-logs" \
            ghcr.io/${{ github.repository_owner }}/realms:demo-${{ github.sha }} bash -c "
          ./tests/test_extensions.py; \
          EXIT_CODE=\$?; \
          mkdir -p /app/extension-logs && \
          cp -f dfx.log /app/extension-logs/ 2>/dev/null || true && \
          cp -f realms_cli.log /app/extension-logs/ 2>/dev/null || true; \
          exit \$EXIT_CODE"
      
      - name: Upload extension test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: extension-test-logs-main
          path: extension-logs/
          retention-days: 7

  test-ui-e2e:
    runs-on: ubuntu-latest
    needs: build
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Wait for Docker image to be available
        run: |
          # Wait up to 5 minutes for the Docker image to be available
          for i in {1..30}; do
            if docker pull ghcr.io/${{ github.repository_owner }}/realms-demo:${{ github.sha }}; then
              echo "Docker image is available"
              break
            else
              echo "Waiting for Docker image... (attempt $i/30)"
              sleep 10
            fi
          done
      
      - name: Run Playwright tests
        run: |
          docker run --rm \
            -v "$(pwd)/test-logs:/app/test-logs" \
            ghcr.io/${{ github.repository_owner }}/realms-demo:${{ github.sha }} bash -c "
          (realms create --random && \
          realms deploy --folder generated_realm && \
          src/realm_frontend/run-e2e-tests.sh specs/workflows.spec.ts --reporter=line); \
          EXIT_CODE=\$?; \
          mkdir -p /app/test-logs && \
          cp -f dfx.log /app/test-logs/ 2>/dev/null || true && \
          cp -f dfx2.log /app/test-logs/ 2>/dev/null || true && \
          cp -f realms_cli.log /app/test-logs/ 2>/dev/null || true && \
          cp -f src/realm_frontend/test-results/*.* /app/test-logs/ 2>/dev/null || true; \
          exit \$EXIT_CODE"
      
      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-logs-main
          path: test-logs/
          retention-days: 7

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, test-extensions, test-ui-e2e]
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to staging
        run: |
          # Store identity in a temporary file
          echo "${{ secrets.IC_IDENTITY_PEM }}" > identity.pem
          chmod 600 identity.pem
          
          # Pull the image that was tested
          docker pull ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }}
          
          # Deploy using realms CLI with staging network
          docker run --rm \
            -v "$(pwd)/identity.pem:/app/identity.pem" \
            -v "$(pwd)/deploy-logs:/app/deploy-logs" \
            -e DFX_WARNING="-mainnet_plaintext_identity" \
            ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }} \
            bash -c "(realms create --random && \
                     realms deploy --folder generated_realm --network staging --identity /app/identity.pem); \
                     EXIT_CODE=\$?; \
                     mkdir -p /app/deploy-logs && \
                     cp -f dfx.log /app/deploy-logs/ 2>/dev/null || true && \
                     cp -f dfx2.log /app/deploy-logs/ 2>/dev/null || true && \
                     cp -f realms_cli.log /app/deploy-logs/ 2>/dev/null || true; \
                     exit \$EXIT_CODE"
          
          # Clean up
          rm identity.pem
      
      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: staging-deployment-logs
          path: deploy-logs/
          retention-days: 7
