name: Main Pipeline - Build, Test, Deploy & Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      canister:
        description: 'Canister to deploy (leave empty for all)'
        required: false
        default: ''
      create_release:
        description: 'Create release after staging deployment (manual trigger only)'
        required: false
        default: false
        type: boolean
      release_type:
        description: 'Type of release (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build:
    # Skip this workflow if the commit message contains "Bump version"
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Insert commit hash and datetime
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          sed -i "s/COMMIT_HASH_PLACEHOLDER/$COMMIT_HASH/g" src/realm_backend/api/status.py
          sed -i "s/COMMIT_HASH_PLACEHOLDER/$COMMIT_HASH/g" src/realm_frontend/src/app.html

          COMMIT_DATETIME=$(git log --format="%cd" --date=iso8601 -1)
          sed -i "s/COMMIT_DATETIME_PLACEHOLDER/$COMMIT_DATETIME/g" src/realm_frontend/src/app.html

          VERSION=$(cat version.txt)
          sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" src/realm_backend/api/status.py
          sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" src/realm_frontend/src/app.html
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Clean Docker environment
        run: |
          # Remove any dangling images/layers to prevent cache contamination
          docker system prune -f --filter "until=24h"
          echo "✅ Docker environment cleaned"
      
      - name: Build and push base Docker images
        run: |
          # Build base image with no cache for reliable, reproducible builds
          docker build \
            --no-cache \
            --pull \
            --target base \
            -t ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }} \
            -t ghcr.io/${{ github.repository_owner }}/realms:latest \
            .
          
          # Push both tags
          docker push ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/realms:latest
      
          docker build \
            --target demo \
            -t ghcr.io/${{ github.repository_owner }}/realms:demo-${{ github.sha }} \
            -t ghcr.io/${{ github.repository_owner }}/realms:demo-latest \
            .
          
          # Push both tags
          docker push ghcr.io/${{ github.repository_owner }}/realms:demo-${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/realms:demo-latest

          docker build \
            --pull \
            --target test \
            -t ghcr.io/${{ github.repository_owner }}/realms:test-${{ github.sha }} \
            -t ghcr.io/${{ github.repository_owner }}/realms:test-latest \
            .
          
          # Push both tags
          docker push ghcr.io/${{ github.repository_owner }}/realms:test-${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/realms:test-latest

          docker build \
            --pull \
            --target ui-test \
            -t ghcr.io/${{ github.repository_owner }}/realms:ui-test-${{ github.sha }} \
            -t ghcr.io/${{ github.repository_owner }}/realms:ui-test-latest \
            .
          
          # Push both tags
          docker push ghcr.io/${{ github.repository_owner }}/realms:ui-test-${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/realms:ui-test-latest
      
      - name: Verify Docker images
        if: always()
        run: |
          mkdir -p build-logs
          # Check if the base image was built successfully
          if docker image inspect ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }} >/dev/null 2>&1; then
            echo "✅ Base Docker image built successfully"
            docker images | grep ${{ github.sha }} || true
          else
            echo "❌ Base Docker image build failed"
            echo "Base Docker build failed" > build-logs/build-failed.txt
          fi

          # Check if the demo image was built successfully
          if docker image inspect ghcr.io/${{ github.repository_owner }}/realms:demo-${{ github.sha }} >/dev/null 2>&1; then
            echo "✅ Demo Docker image built successfully"
            docker images | grep demo-${{ github.sha }} || true
          else
            echo "❌ Demo Docker image build failed"
            echo "Demo Docker build failed" > build-logs/demo-build-failed.txt
          fi

          # Check if the test image was built successfully
          if docker image inspect ghcr.io/${{ github.repository_owner }}/realms:test-${{ github.sha }} >/dev/null 2>&1; then
            echo "✅ Test Docker image built successfully"
            docker images | grep test-${{ github.sha }} || true
          else
            echo "❌ Test Docker image build failed"
            echo "Test Docker build failed" > build-logs/test-build-failed.txt
          fi

          # Check if the ui-test image was built successfully
          if docker image inspect ghcr.io/${{ github.repository_owner }}/realms:ui-test-${{ github.sha }} >/dev/null 2>&1; then
            echo "✅ UI Test Docker image built successfully"
            docker images | grep ui-test-${{ github.sha }} || true
          else
            echo "❌ UI Test Docker image build failed"
            echo "UI Test Docker build failed" > build-logs/ui-test-build-failed.txt
          fi
      
      - name: Save build metadata
        if: always()
        run: |
          echo "Commit: ${{ github.sha }}" > build-logs/build-info.txt
          echo "Image: ghcr.io/${{ github.repository_owner }}/realms:${{ github.sha }}" >> build-logs/build-info.txt
          echo "Branch: ${{ github.ref_name }}" >> build-logs/build-info.txt
          echo "Timestamp: $(date -u)" >> build-logs/build-info.txt
      
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-main
          path: build-logs/
          retention-days: 7

  test:
    runs-on: ubuntu-latest
    needs: build
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run linting checks
        run: |
          mkdir -p lint-logs
          # First fix formatting issues
          docker run --rm ghcr.io/${{ github.repository_owner }}/realms:test-${{ github.sha }} ./scripts/run_linters.sh --fix > lint-logs/lint-fix.log 2>&1 || true
          # Then verify all issues are fixed
          docker run --rm ghcr.io/${{ github.repository_owner }}/realms:test-${{ github.sha }} ./scripts/run_linters.sh > lint-logs/lint-check.log 2>&1 || true
      
      - name: Upload lint logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-logs-main
          path: lint-logs/
          retention-days: 7
  
  test-extensions:
    runs-on: ubuntu-latest
    needs: build
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run extension tests
        run: |
          docker run --rm \
            -v "$(pwd)/extension-logs:/app/extension-logs" \
            ghcr.io/${{ github.repository_owner }}/realms:test-${{ github.sha }} bash -c "
          ./tests/test_extensions.py; \
          EXIT_CODE=\$?; \
          mkdir -p /app/extension-logs && \
          cp -f dfx.log /app/extension-logs/ 2>/dev/null || true && \
          cp -f realms_cli.log /app/extension-logs/ 2>/dev/null || true; \
          exit \$EXIT_CODE"
      
      - name: Upload extension test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: extension-test-logs-main
          path: extension-logs/
          retention-days: 7

  test-ui-e2e:
    runs-on: ubuntu-latest
    needs: build
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Playwright tests
        run: |
          docker run --rm \
            -v "$(pwd)/test-logs:/app/test-logs" \
            ghcr.io/${{ github.repository_owner }}/realms:ui-test-${{ github.sha }} bash -c "
          (realms create --random && \
          realms deploy --folder generated_realm && \
          src/realm_frontend/run-e2e-tests.sh specs/workflows.spec.ts specs/multilingual.spec.ts --reporter=line); \
          EXIT_CODE=\$?; \
          mkdir -p /app/test-logs && \
          cp -f dfx.log /app/test-logs/ 2>/dev/null || true && \
          cp -f dfx2.log /app/test-logs/ 2>/dev/null || true && \
          cp -f realms_cli.log /app/test-logs/ 2>/dev/null || true && \
          cp -f src/realm_frontend/test-results/*.* /app/test-logs/ 2>/dev/null || true; \
          exit \$EXIT_CODE"
      
      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-logs-main
          path: test-logs/
          retention-days: 7

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, test-extensions, test-ui-e2e]
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to staging
        run: |
          # Store identity in a temporary file
          echo "${{ secrets.IC_IDENTITY_PEM }}" > identity.pem
          chmod 600 identity.pem
          
          # Pull the image that was tested
          docker pull ghcr.io/${{ github.repository_owner }}/realms:demo-${{ github.sha }}
          
          # Deploy using realms CLI with staging network
          docker run --rm \
            -v "$(pwd)/identity.pem:/app/identity.pem" \
            -v "$(pwd)/deploy-logs:/app/deploy-logs" \
            -e DFX_WARNING="-mainnet_plaintext_identity" \
            ghcr.io/${{ github.repository_owner }}/realms:demo-${{ github.sha }} \
            bash -c "(dfx identity import my-identity /app/identity.pem --storage-mode=plaintext --force && \
                     dfx identity use my-identity && \
                     realms create --random --network staging --deploy); \
                     EXIT_CODE=\$?; \
                     mkdir -p /app/deploy-logs && \
                     cp -f dfx.log /app/deploy-logs/ 2>/dev/null || true && \
                     cp -f dfx2.log /app/deploy-logs/ 2>/dev/null || true && \
                     cp -f realms_cli.log /app/deploy-logs/ 2>/dev/null || true; \
                     exit \$EXIT_CODE"
          
          # Clean up
          rm identity.pem
      
      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: staging-deployment-logs
          path: deploy-logs/
          retention-days: 7

  release:
    # Manual release creation - only enabled if staging deployment succeeds
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event.inputs.create_release == true
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.PAT_GITHUB }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bumpversion semver build twine
      
      # Bump version
      - name: Bump version
        id: bump_version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create version file if it doesn't exist
          if [ ! -f "version.txt" ]; then
            echo "0.1.0" > version.txt
          fi
          
          # Calculate new version with Python
          CURRENT_VERSION=$(cat version.txt)
          NEW_VERSION=$(python -c "import semver; v=semver.VersionInfo.parse('${CURRENT_VERSION}'); print(v.bump_${{ github.event.inputs.release_type || 'patch' }})())")
          
          # Update version file
          echo "${NEW_VERSION}" > version.txt
          
          # Update CLI version
          sed -i "s/version = \".*\"/version = \"${NEW_VERSION}\"/" cli/pyproject.toml
          sed -i "s/__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" cli/realms_cli/__init__.py
          
          # Store new version for later use
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
      
      # Pull and tag the Docker images
      - name: Pull and tag Docker images
        run: |
          # Pull the latest Docker image
          docker pull ghcr.io/${{ github.repository_owner }}/realms:latest
          
          # Tag with version number
          docker tag ghcr.io/${{ github.repository_owner }}/realms:latest \
            ghcr.io/${{ github.repository_owner }}/realms:v${{ steps.bump_version.outputs.NEW_VERSION }}
          
          # Push the versioned tag
          docker push ghcr.io/${{ github.repository_owner }}/realms:v${{ steps.bump_version.outputs.NEW_VERSION }}
          
          echo "✅ Docker image tagged and pushed: v${{ steps.bump_version.outputs.NEW_VERSION }}"
      
      - name: Extract canister artifacts
        run: |
          # Create directory for artifacts
          mkdir -p artifacts

          # Build canisters and extract WASM/DID files
          docker run --rm \
            -v "$(pwd)/artifacts:/artifacts" \
            ghcr.io/${{ github.repository_owner }}/realms:latest \
            bash -c "dfx start --background --clean && \
                    dfx canister create --all && \
                    dfx build --all && \
                    cp .dfx/local/canisters/realm_backend/realm_backend.wasm.gz /artifacts/ && \
                    cp .dfx/local/canisters/realm_backend/service.did /artifacts/realm_backend.did && \
                    cp .dfx/local/canisters/realm_registry_backend/realm_registry_backend.wasm.gz /artifacts/ && \
                    cp .dfx/local/canisters/realm_registry_backend/service.did /artifacts/realm_registry_backend.did && \
                    dfx stop"
          
          # Move artifacts to root for release
          mv artifacts/realm_backend.wasm.gz ./
          mv artifacts/realm_backend.did ./
          mv artifacts/realm_registry_backend.wasm.gz ./
          mv artifacts/realm_registry_backend.did ./
          
          echo "✅ Canister artifacts extracted"
      
      - name: Build and publish CLI to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd cli
          
          # Verify version consistency
          PYPROJECT_VERSION=$(grep -Po '^version = "\K[^"]*' pyproject.toml)
          INIT_VERSION=$(grep -Po '(?<=__version__ = ")[^"]*' realms_cli/__init__.py)
          
          echo "Version in pyproject.toml: $PYPROJECT_VERSION"
          echo "Version in __init__.py: $INIT_VERSION"
          
          if [ "$PYPROJECT_VERSION" != "$INIT_VERSION" ]; then
            echo "ERROR: Version mismatch"
            exit 1
          fi
          
          # Build and publish
          python -m build
          twine check dist/*
          twine upload dist/*
          
          echo "✅ CLI published to PyPI: v${{ steps.bump_version.outputs.NEW_VERSION }}"
      
      # Commit version changes
      - name: Commit and push version changes
        run: |
          git add version.txt cli/pyproject.toml cli/realms_cli/__init__.py
          git commit -m "Bump version to ${{ steps.bump_version.outputs.NEW_VERSION }}"
          git tag -a "v${{ steps.bump_version.outputs.NEW_VERSION }}" -m "Release v${{ steps.bump_version.outputs.NEW_VERSION }}"
          git remote set-url origin https://${{ secrets.PAT_GITHUB }}@github.com/${{ github.repository }}.git
          git push origin
          git push origin --tags
      
      # Create GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.NEW_VERSION }}
          name: Release v${{ steps.bump_version.outputs.NEW_VERSION }}
          generate_release_notes: true
          files: |
            realm_backend.wasm.gz
            realm_backend.did
            realm_registry_backend.wasm.gz
            realm_registry_backend.did
          body: |
            # Release v${{ steps.bump_version.outputs.NEW_VERSION }}
            
            This release includes:
            
            ## 📦 Release Assets
            
            ### 🐳 Docker Image
            ```bash
            docker pull ghcr.io/${{ github.repository_owner }}/realms:v${{ steps.bump_version.outputs.NEW_VERSION }}
            # or use :latest for the most recent release
            docker pull ghcr.io/${{ github.repository_owner }}/realms:latest
            ```
            
            ### 🔧 Canister Artifacts (WASM + DID)
            - `realm_backend.wasm.gz` + `realm_backend.did` - Main backend canister
            - `realm_registry_backend.wasm.gz` + `realm_registry_backend.did` - Registry backend canister
            
            ### 📦 CLI Tool (PyPI)
            ```bash
            pip install --upgrade realms-cli==${{ steps.bump_version.outputs.NEW_VERSION }}
            ```
            
            ### 📁 Source Code
            - Source code (zip)
            - Source code (tar.gz)
            
            ## Installation
            
            **Deploy Canisters:**
            ```bash
            # Download the .wasm.gz and .did files
            dfx deploy --network ic
            ```
            
            **Run Docker Image:**
            ```bash
            docker run -it ghcr.io/${{ github.repository_owner }}/realms:v${{ steps.bump_version.outputs.NEW_VERSION }}
            ```
            
            **Install CLI:**
            ```bash
            pip install realms-cli==${{ steps.bump_version.outputs.NEW_VERSION }}
            ```
            
            ## Deployment
            
            ✅ Deployed to staging: https://staging.realms.example.com
            
            ## Commit
            ${{ github.sha }}
