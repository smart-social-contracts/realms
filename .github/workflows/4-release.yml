name: 4. Create Release

on:
  workflow_run:
    workflows: ["2. Run Tests"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:  # Allows manual triggering
    inputs:
      release_type:
        description: 'Type of release (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      create_github_release:
        description: 'Create GitHub Release'
        required: false
        default: true
        type: boolean

jobs:
  deploy:
    # Only run if the workflow_run event was successful or if it's a manual dispatch
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.PAT_GITHUB }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bumpversion semver
      
      # Bump version if release_type is provided
      - name: Bump version
        if: ${{ github.event.inputs.release_type != '' }}
        id: bump_version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create version file if it doesn't exist
          if [ ! -f "version.txt" ]; then
            echo "0.1.0" > version.txt
          fi
          
          # Calculate new version with Python
          CURRENT_VERSION=$(cat version.txt)
          NEW_VERSION=$(python -c "import semver; v=semver.VersionInfo.parse('${CURRENT_VERSION}'); print(v.bump_${{ github.event.inputs.release_type }}())")
          
          # Update version file
          echo "${NEW_VERSION}" > version.txt
          
          # Store new version for later use
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
      
      # Get SHA for workflow run or use current SHA for manual dispatch
      - name: Get commit SHA
        id: get_sha
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "SHA=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
          else
            echo "SHA=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Pull Docker image
        run: |
          # Pull the Docker image that was already built in the build stage
          docker pull ghcr.io/${{ github.repository_owner }}/realms:${{ steps.get_sha.outputs.SHA }} 
      
      - name: Build canisters and extract artifacts
        run: |
          # Run DFX build in the Docker container
          docker run --rm \
            -v "$(pwd):/host" \
            ghcr.io/${{ github.repository_owner }}/realms:${{ steps.get_sha.outputs.SHA }} \
            bash -c "cp .dfx/local/canisters/realm_backend/*.wasm.gz /host/realm_backend.wasm \
                  && cp .dfx/local/canisters/realm_backend/*.did /host/realm_backend.did"
                    
      
      # Push changes if we did a version bump
      - name: Push changes
        if: ${{ github.event.inputs.release_type != '' }}
        run: |
          git add version.txt
          git commit -m "Bump version to $(cat version.txt)"
          git tag -a "v$(cat version.txt)" -m "Release v$(cat version.txt)"
          git remote set-url origin https://${{ secrets.PAT_GITHUB }}@github.com/${{ github.repository }}.git
          git push origin
          git push origin --tags
      
      # Create a GitHub release
      - name: Create Release
        if: ${{ (github.event.inputs.release_type != '' && github.event.inputs.create_github_release == 'true') || github.event_name == 'workflow_run' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_type != '' && format('v{0}', steps.bump_version.outputs.NEW_VERSION) || format('release-{0}', github.run_id) }}
          name: ${{ github.event.inputs.release_type != '' && format('Release v{0}', steps.bump_version.outputs.NEW_VERSION) || format('Release {0}', github.run_id) }}
          generate_release_notes: true
          files: |
            realm_backend.wasm
            realm_backend.did
          body: |
            # ${{ github.event.inputs.release_type != '' && format('Release v{0}', steps.bump_version.outputs.NEW_VERSION) || format('Release {0}', github.run_id) }}
            
            This release contains the compiled WASM and Candid (DID) files for the Internet Computer canisters.
            
            ## Included Canisters
            - realm_backend
            
            ## Installation
            Download the appropriate files and deploy using `dfx deploy` or your preferred deployment method.
            
            ## Commit
            ${{ steps.get_sha.outputs.SHA }}
