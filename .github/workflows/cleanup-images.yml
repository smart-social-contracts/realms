name: Cleanup Old Docker Images

on:
  schedule:
    # Run weekly on Sunday at midnight
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      days_old:
        description: 'Delete images older than X days'
        required: true
        default: '30'
      dry_run:
        description: 'Dry run (no actual deletion)'
        type: 'boolean'
        required: false
        default: false

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Delete old packages
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // Get inputs (with defaults)
            const days = context.payload.inputs ? parseInt(context.payload.inputs.days_old || '30') : 30;
            const dryRun = context.payload.inputs ? (context.payload.inputs.dry_run === 'true') : false;
            
            // Calculate cutoff date (images older than this will be deleted)
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - days);
            
            // Get all package versions for the realms container
            const packageName = 'realms';
            console.log(`Looking for ${owner}/${packageName} images older than ${days} days...`);
            
            // First, get the package ID
            let packages;
            try {
              // Try as organization
              const orgResponse = await github.rest.packages.listPackagesForOrganization({
                org: owner,
                package_type: 'container'
              });
              packages = orgResponse.data;
            } catch (error) {
              // Fall back to user
              console.log('Not found as organization, trying as user...');
              const userResponse = await github.rest.packages.listPackagesForUser({
                username: owner,
                package_type: 'container'
              });
              packages = userResponse.data;
            }
            
            const targetPackage = packages.find(pkg => pkg.name === packageName);
            
            if (!targetPackage) {
              console.log(`No package found with name ${packageName}`);
              return;
            }
            
            // Get versions of the package
            let versions;
            try {
              // Try as organization
              const orgResponse = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                org: owner,
                package_type: 'container',
                package_name: packageName
              });
              versions = orgResponse.data;
            } catch (error) {
              // Fall back to user
              console.log('Not found as organization, trying as user...');
              const userResponse = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                username: owner,
                package_type: 'container',
                package_name: packageName
              });
              versions = userResponse.data;
            }
            
            console.log(`Found ${versions.length} images for ${packageName}`);
            
            // Keep track of images to delete
            const toDelete = [];
            
            // Process versions
            for (const version of versions) {
              const createdAt = new Date(version.created_at);
              
              // Skip versions that aren't old enough
              if (createdAt > cutoffDate) {
                console.log(`Keeping ${version.name} (created: ${createdAt.toISOString()})`);
                continue;
              }
              
              // Skip versions with special tags (like latest or releases)
              const hasSpecialTag = version.metadata.container.tags.some(tag => 
                tag === 'latest' || 
                tag.startsWith('v') || 
                tag === 'staging' || 
                tag === 'production');
              
              if (hasSpecialTag) {
                console.log(`Keeping ${version.name} (has special tag: ${version.metadata.container.tags.join(', ')})`);
                continue;
              }
              
              // If we're here, this version should be deleted
              console.log(`Marking for deletion: ${version.name} (created: ${createdAt.toISOString()}, tags: ${version.metadata.container.tags.join(', ')})`);
              toDelete.push(version);
            }
            
            // Perform deletion
            console.log(`Found ${toDelete.length} images to delete${dryRun ? ' (DRY RUN)' : ''}`);
            
            if (!dryRun) {
              for (const version of toDelete) {
                console.log(`Deleting ${version.name}...`);
                try {
                  try {
                    // Try as organization
                    await github.rest.packages.deletePackageVersionForOrg({
                      org: owner,
                      package_type: 'container',
                      package_name: packageName,
                      package_version_id: version.id
                    });
                  } catch (error) {
                    // Fall back to user
                    await github.rest.packages.deletePackageVersionForUser({
                      username: owner,
                      package_type: 'container',
                      package_name: packageName,
                      package_version_id: version.id
                    });
                  }
                  console.log(`Deleted ${version.name}`);
                } catch (error) {
                  console.log(`Failed to delete ${version.name}: ${error.message}`);
                }
              }
            }
            
            console.log('Cleanup completed');
