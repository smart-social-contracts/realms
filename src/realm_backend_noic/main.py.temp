# import json
# import os
# import sys
# import traceback

# from flask import Flask, jsonify, request

# # Add the parent directory to the Python path to import from realm_backend
# # sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
# from realm_backend.api.core import (call_extension, create_organization,
#                                     create_proposal, create_token,
#                                     get_extension_list, get_universe,
#                                     initialize, load_extension, mint_tokens,
#                                     register_citizen, register_user,
#                                     submit_vote, transfer_tokens)

# app = Flask(__name__)

# # Initialize the API with a default realm name
# initialize("LocalRealm", "local-admin-principal")


# @app.route("/api/v1/universe", methods=["GET"])
# def universe():
#     """Get the current state of the realm universe"""
#     return jsonify(get_universe())


# @app.route("/api/v1/extensions", methods=["GET"])
# def extensions():
#     """Get a list of all loaded extensions"""
#     return jsonify(get_extension_list())


# @app.route("/api/v1/users/register", methods=["POST"])
# def users_register():
#     """Register a new user"""
#     data = request.json
#     principal_id = data.get(
#         "principal_id", "local-user-principal"
#     )  # Default for local testing
#     return jsonify(
#         register_user(
#             principal_id=principal_id,
#             username=data.get("username"),
#             email=data.get("email"),
#             display_name=data.get("display_name"),
#         )
#     )


# @app.route("/api/v1/citizens/register", methods=["POST"])
# def citizens_register():
#     """Register a user as a citizen"""
#     data = request.json
#     return jsonify(
#         register_citizen(
#             user_id=data.get("user_id"),
#             citizenship_level=data.get("citizenship_level", "basic"),
#         )
#     )


# @app.route("/api/v1/organizations/create", methods=["POST"])
# def organizations_create():
#     """Create a new organization"""
#     data = request.json
#     return jsonify(
#         create_organization(
#             name=data.get("name"),
#             founder_id=data.get("founder_id"),
#             description=data.get("description", ""),
#             org_type=data.get("org_type", "general"),
#         )
#     )


# @app.route("/api/v1/tokens/create", methods=["POST"])
# def tokens_create():
#     """Create a new token"""
#     data = request.json
#     return jsonify(
#         create_token(
#             name=data.get("name"),
#             symbol=data.get("symbol"),
#             creator_id=data.get("creator_id"),
#             token_type=data.get("token_type", "currency"),
#             total_supply=data.get("total_supply"),
#             decimals=data.get("decimals", 8),
#             is_transferable=data.get("is_transferable", True),
#         )
#     )


# @app.route("/api/v1/tokens/mint", methods=["POST"])
# def tokens_mint():
#     """Mint new tokens and add to a vault"""
#     data = request.json
#     return jsonify(
#         mint_tokens(
#             token_id=data.get("token_id"),
#             to_vault_id=data.get("to_vault_id"),
#             amount=float(data.get("amount")),
#             authorized_by_id=data.get("authorized_by_id"),
#         )
#     )


# @app.route("/api/v1/tokens/transfer", methods=["POST"])
# def tokens_transfer():
#     """Transfer tokens between vaults"""
#     data = request.json
#     return jsonify(
#         transfer_tokens(
#             from_vault_id=data.get("from_vault_id"),
#             to_vault_id=data.get("to_vault_id"),
#             token_id=data.get("token_id"),
#             amount=float(data.get("amount")),
#             authorized_by_id=data.get("authorized_by_id"),
#         )
#     )


# @app.route("/api/v1/proposals/create", methods=["POST"])
# def proposals_create():
#     """Create a new proposal"""
#     data = request.json
#     return jsonify(
#         create_proposal(
#             title=data.get("title"),
#             description=data.get("description"),
#             creator_id=data.get("creator_id"),
#             proposal_type=data.get("proposal_type"),
#         )
#     )


# @app.route("/api/v1/proposals/vote", methods=["POST"])
# def proposals_vote():
#     """Submit a vote on a proposal"""
#     data = request.json
#     return jsonify(
#         submit_vote(
#             proposal_id=data.get("proposal_id"),
#             voter_id=data.get("voter_id"),
#             vote_type=data.get("vote_type"),
#             rationale=data.get("rationale", ""),
#         )
#     )


# @app.route("/api/v1/extensions/load", methods=["POST"])
# def extensions_load():
#     """Load a new extension"""
#     data = request.json
#     return jsonify(
#         load_extension(
#             extension_code=data.get("extension_code"), config=data.get("config")
#         )
#     )


# @app.route("/api/v1/extensions/call", methods=["POST"])
# def extensions_call():
#     """Call an entry point of an extension"""
#     data = request.json
#     return jsonify(
#         call_extension(
#             extension_name=data.get("extension_name"),
#             entry_point=data.get("entry_point"),
#             args=data.get("args"),
#             kwargs=data.get("kwargs"),
#         )
#     )


# # Error handler for all routes
# @app.errorhandler(Exception)
# def handle_error(e):
#     error_msg = f"Internal server error: {str(e)}"
#     app.logger.error(error_msg)
#     app.logger.error(traceback.format_exc())
#     return (
#         jsonify(
#             {"success": False, "error": error_msg, "traceback": traceback.format_exc()}
#         ),
#         500,
#     )


# if __name__ == "__main__":
#     # Run the Flask app on port 5000
#     app.run(debug=True, host="0.0.0.0", port=5000)
