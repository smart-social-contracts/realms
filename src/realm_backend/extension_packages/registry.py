"""
Extension Function Registry

This file provides a centralized registry for all extension functions.
It maps extension names and function names to their actual implementations.

Auto-generated by the realms CLI extension command.
DO NOT EDIT MANUALLY - your changes will be overwritten.
"""

from typing import Callable, Optional
from kybra_simple_logging import get_logger

logger = get_logger("extension_packages.registry")



def get_func(extension_name: str, function_name: str) -> Optional[Callable]:
    """
    Get a function from an extension by name.
    
    Args:
        extension_name: The ID of the extension
        function_name: The name of the function to retrieve
        
    Returns:
        The function object if found, None otherwise
    """
    logger.debug(f"Looking up function '{function_name}' in extension '{extension_name}'")
    
    # Map extension names to their entry modules
    extension_modules = {
    }
    
    # Get the extension module
    module = extension_modules.get(extension_name)
    if not module:
        logger.error(f"Extension '{extension_name}' not found in registry")
        raise ValueError(f"Extension '{extension_name}' not found")
    
    # Get the function from the module
    if not hasattr(module, function_name):
        logger.error(f"Function '{function_name}' not found in extension '{extension_name}'")
        raise AttributeError(f"Extension '{extension_name}' has no function '{function_name}'")
    
    func = getattr(module, function_name)
    logger.debug(f"Found function '{function_name}' in extension '{extension_name}'")
    return func
