db_command
network: None
canister: None
Effective network: local
Effective canister: realm_backend
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json realm_backend status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'realm_backend', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json realm_backend get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'realm_backend', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 0 items
handle_back_navigation
self.state.navigation_stack = []
db_command
network: None
canister: uxrrr-q7777-77774-qaaaq-cai
Effective network: local
Effective canister: uxrrr-q7777-77774-qaaaq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 0 items
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.contract.Contract'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Contract", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Contract", 0, 10)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
Backend result: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
Failed to load data: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user_profile.Profiles'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Profiles", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Profiles", 0, 10)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
Backend result: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
Failed to load data: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.task.Task'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Task", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Task", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 0, 'total_pages': 0}
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 0, 'total_pages': 0}
Loaded 0 items
handle_back_navigation
self.state.navigation_stack = []
db_command
network: None
canister: uxrrr-q7777-77774-qaaaq-cai
Effective network: local
Effective canister: uxrrr-q7777-77774-qaaaq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 0 items
db_command
network: None
canister: uxrrr-q7777-77774-qaaaq-cai
Effective network: local
Effective canister: uxrrr-q7777-77774-qaaaq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 0 items
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user.User'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("User", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("User", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "51",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Loaded 0 items
handle_selection
self.state.view_mode = record_list
handle_selection
self.state.view_mode = record_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user.User'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("User", 1, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("User", 1, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "1",\n        "page_size": "10",\n        "total_items_count": "51",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 1, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Backend result: {'items': [], 'page_num': 1, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Loaded 0 items
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user.User'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("User", 2, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("User", 2, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "2",\n        "page_size": "10",\n        "total_items_count": "51",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 2, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Backend result: {'items': [], 'page_num': 2, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Loaded 0 items
db_command
network: None
canister: uxrrr-q7777-77774-qaaaq-cai
Effective network: local
Effective canister: uxrrr-q7777-77774-qaaaq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 0 items
db_command
network: None
canister: uxrrr-q7777-77774-qaaaq-cai
Effective network: local
Effective canister: uxrrr-q7777-77774-qaaaq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "0",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "0",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "0",\n      "licenses_count": "0",\n      "mandates_count": "0",\n      "organizations_count": "0",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "0",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

db_command
network: None
canister: uxrrr-q7777-77774-qaaaq-cai
Effective network: local
Effective canister: uxrrr-q7777-77774-qaaaq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 0 items
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.realm.Realm'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Realm", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Realm", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.363\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.363\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-14T21:08:28.363075\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.363', 'timestamp_updated': '2025-09-14 21:08:28.363', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-14T21:08:28.363075', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}}], 'page_num': 0, 'page_size': 10, 'total_items_count': 1, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.363', 'timestamp_updated': '2025-09-14 21:08:28.363', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-14T21:08:28.363075', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}}], 'page_num': 0, 'page_size': 10, 'total_items_count': 1, 'total_pages': 1}
Loaded 1 items
handle_selection
self.state.view_mode = record_list
self._relationship_cache = {}
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user.User'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("User", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("User", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.241\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.354\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.242\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.336\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"2\\", \\"id\\": \\"user_000\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=72383\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.242\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.359\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"3\\", \\"id\\": \\"user_001\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=600169\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.242\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.357\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"4\\", \\"id\\": \\"user_002\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=187116\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.242\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.356\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"5\\", \\"id\\": \\"user_003\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=487782\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.243\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.353\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"6\\", \\"id\\": \\"user_004\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=72962\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.243\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.274\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"7\\", \\"id\\": \\"user_005\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=99891\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.243\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.357\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"8\\", \\"id\\": \\"user_006\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=701453\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.243\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.357\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"9\\", \\"id\\": \\"user_007\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=270787\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.243\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.311\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"10\\", \\"id\\": \\"user_008\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=439394\\", \\"user_profile\\": \\"member\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "51",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.241', 'timestamp_updated': '2025-09-14 21:08:28.354', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.336', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=72383', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.359', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=600169', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=187116', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.356', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=487782', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.353', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=72962', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.274', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=99891', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=701453', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=270787', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.311', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=439394', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.241', 'timestamp_updated': '2025-09-14 21:08:28.354', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.336', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=72383', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.359', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=600169', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=187116', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.356', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=487782', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.353', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=72962', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.274', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=99891', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=701453', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=270787', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.311', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=439394', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Loaded 10 items
handle_selection
self.state.view_mode = record_list
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user_profile.UserProfile'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("UserProfile", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("UserProfile", 0, 10)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
Backend result: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
Failed to load data: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
handle_back_navigation
self.state.navigation_stack = []
db_command
network: None
canister: uxrrr-q7777-77774-qaaaq-cai
Effective network: local
Effective canister: uxrrr-q7777-77774-qaaaq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.dispute.Dispute'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Dispute", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Dispute", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.360\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.360\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"appealed\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.360\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.360\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"2\\", \\"status\\": \\"resolved\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.360\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.360\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"3\\", \\"status\\": \\"open\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.360\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.360\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"4\\", \\"status\\": \\"appealed\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.360\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.360\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"5\\", \\"status\\": \\"closed\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.361\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.361\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"6\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.361\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.361\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"7\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.361\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.361\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"8\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.361\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.361\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"9\\", \\"status\\": \\"resolved\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.361\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.361\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"10\\", \\"status\\": \\"resolved\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "10",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.360', 'timestamp_updated': '2025-09-14 21:08:28.360', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'appealed', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.360', 'timestamp_updated': '2025-09-14 21:08:28.360', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '2', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.360', 'timestamp_updated': '2025-09-14 21:08:28.360', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '3', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.360', 'timestamp_updated': '2025-09-14 21:08:28.360', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '4', 'status': 'appealed', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.360', 'timestamp_updated': '2025-09-14 21:08:28.360', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '5', 'status': 'closed', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.361', 'timestamp_updated': '2025-09-14 21:08:28.361', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '6', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.361', 'timestamp_updated': '2025-09-14 21:08:28.361', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '7', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.361', 'timestamp_updated': '2025-09-14 21:08:28.361', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '8', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.361', 'timestamp_updated': '2025-09-14 21:08:28.361', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '9', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.361', 'timestamp_updated': '2025-09-14 21:08:28.361', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '10', 'status': 'resolved', 'metadata': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 10, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.360', 'timestamp_updated': '2025-09-14 21:08:28.360', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'appealed', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.360', 'timestamp_updated': '2025-09-14 21:08:28.360', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '2', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.360', 'timestamp_updated': '2025-09-14 21:08:28.360', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '3', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.360', 'timestamp_updated': '2025-09-14 21:08:28.360', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '4', 'status': 'appealed', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.360', 'timestamp_updated': '2025-09-14 21:08:28.360', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '5', 'status': 'closed', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.361', 'timestamp_updated': '2025-09-14 21:08:28.361', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '6', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.361', 'timestamp_updated': '2025-09-14 21:08:28.361', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '7', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.361', 'timestamp_updated': '2025-09-14 21:08:28.361', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '8', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.361', 'timestamp_updated': '2025-09-14 21:08:28.361', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '9', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-14 21:08:28.361', 'timestamp_updated': '2025-09-14 21:08:28.361', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '10', 'status': 'resolved', 'metadata': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 10, 'total_pages': 1}
Loaded 10 items
handle_selection
self.state.view_mode = record_list
self._relationship_cache = {}
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.treasury.Treasury'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Treasury", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Treasury", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.363\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.363\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-14T21:08:28.363342\\", \\"updated_at\\": \\"2025-09-14T21:08:28.363345\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.363', 'timestamp_updated': '2025-09-14 21:08:28.363', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-14T21:08:28.363342', 'updated_at': '2025-09-14T21:08:28.363345'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 1, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.363', 'timestamp_updated': '2025-09-14 21:08:28.363', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-14T21:08:28.363342', 'updated_at': '2025-09-14T21:08:28.363345'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 1, 'total_pages': 1}
Loaded 1 items
handle_selection
self.state.view_mode = record_list
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user.User'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("User", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("User", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.241\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.354\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.242\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.336\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"2\\", \\"id\\": \\"user_000\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=72383\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.242\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.359\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"3\\", \\"id\\": \\"user_001\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=600169\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.242\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.357\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"4\\", \\"id\\": \\"user_002\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=187116\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.242\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.356\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"5\\", \\"id\\": \\"user_003\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=487782\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.243\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.353\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"6\\", \\"id\\": \\"user_004\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=72962\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.243\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.274\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"7\\", \\"id\\": \\"user_005\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=99891\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.243\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.357\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"8\\", \\"id\\": \\"user_006\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=701453\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.243\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.357\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"9\\", \\"id\\": \\"user_007\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=270787\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.243\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.311\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"10\\", \\"id\\": \\"user_008\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=439394\\", \\"user_profile\\": \\"member\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "51",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.241', 'timestamp_updated': '2025-09-14 21:08:28.354', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.336', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=72383', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.359', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=600169', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=187116', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.356', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=487782', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.353', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=72962', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.274', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=99891', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=701453', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=270787', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.311', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=439394', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.241', 'timestamp_updated': '2025-09-14 21:08:28.354', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.336', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=72383', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.359', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=600169', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=187116', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.242', 'timestamp_updated': '2025-09-14 21:08:28.356', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=487782', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.353', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=72962', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.274', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=99891', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=701453', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.357', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=270787', 'user_profile': 'member'}, {'timestamp_created': '2025-09-14 21:08:28.243', 'timestamp_updated': '2025-09-14 21:08:28.311', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=439394', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Loaded 10 items
handle_selection
self.state.view_mode = record_list
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
db_command
network: None
canister: uxrrr-q7777-77774-qaaaq-cai
Effective network: local
Effective canister: uxrrr-q7777-77774-qaaaq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user_profile.UserProfile'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("UserProfile", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("UserProfile", 0, 10)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
Backend result: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
Failed to load data: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.realm.Realm'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Realm", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Realm", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-14 21:08:28.363\\", \\"timestamp_updated\\": \\"2025-09-14 21:08:28.363\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-14T21:08:28.363075\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.363', 'timestamp_updated': '2025-09-14 21:08:28.363', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-14T21:08:28.363075', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}}], 'page_num': 0, 'page_size': 10, 'total_items_count': 1, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-14 21:08:28.363', 'timestamp_updated': '2025-09-14 21:08:28.363', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-14T21:08:28.363075', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}}], 'page_num': 0, 'page_size': 10, 'total_items_count': 1, 'total_pages': 1}
Loaded 1 items
handle_selection
self.state.view_mode = record_list
self._relationship_cache = {}
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 0 items
handle_back_navigation
self.state.navigation_stack = []
db_command
network: None
canister: uxrrr-q7777-77774-qaaaq-cai
Effective network: local
Effective canister: uxrrr-q7777-77774-qaaaq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 06:00:40.111\\", \\"timestamp_updated\\": \\"2025-09-15 06:00:40.111\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 06:00:41.508\\", \\"timestamp_updated\\": \\"2025-09-15 06:00:41.508\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"2\\", \\"name\\": \\"social_benefits_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nSocial Benefits Distribution Codex\\\\nAutomatically distributes social benefits to eligible citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime\\\\nimport json\\\\n\\\\ndef check_benefit_eligibility(citizen_id: str) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Check if a citizen is eligible for social benefits\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return {\\\\\\"eligible\\\\\\": False, \\\\\\"reason\\\\\\": \\\\\\"Citizen not found\\\\\\"}\\\\n    \\\\n    # Eligibility criteria\\\\n    criteria = {\\\\n        \\\\\\"residence_permit\\\\\\": citizen.residence_permit == \\\\\\"valid\\\\\\",\\\\n        \\\\\\"tax_compliance\\\\\\": citizen.tax_compliance in [\\\\\\"compliant\\\\\\", \\\\\\"under_review\\\\\\"],\\\\n        \\\\\\"identity_verification\\\\\\": citizen.identity_verification == \\\\\\"verified\\\\\\",\\\\n        \\\\\\"benefits_eligibility\\\\\\": citizen.public_benefits_eligibility == \\\\\\"eligible\\\\\\"\\\\n    }\\\\n    \\\\n    eligible = all(criteria.values())\\\\n    \\\\n    return {\\\\n        \\\\\\"citizen_id\\\\\\": citizen_id,\\\\n        \\\\\\"eligible\\\\\\": eligible,\\\\n        \\\\\\"criteria_met\\\\\\": criteria,\\\\n        \\\\\\"checked_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef calculate_benefit_amount(citizen_id: str) -> int:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate benefit amount based on citizen status\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return 0\\\\n    \\\\n    # Base benefit amount\\\\n    base_amount = 500\\\\n    \\\\n    # Adjustments based on status\\\\n    if citizen.criminal_record == \\\\\\"clean\\\\\\":\\\\n        base_amount += 100\\\\n    \\\\n    if citizen.voting_eligibility == \\\\\\"eligible\\\\\\":\\\\n        base_amount += 50\\\\n    \\\\n    return base_amount\\\\n\\\\ndef distribute_social_benefits():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main social benefits distribution process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all citizens\\\\n    citizens = Citizen.get_all()\\\\n    \\\\n    for citizen in citizens:\\\\n        eligibility = check_benefit_eligibility(citizen.id)\\\\n        \\\\n        if eligibility[\\\\\\"eligible\\\\\\"]:\\\\n            benefit_amount = calculate_benefit_amount(citizen.id)\\\\n            \\\\n            # Create benefit transfer\\\\n            benefit_instrument = Instrument.get_by_name(\\\\\\"Service Credit\\\\\\")\\\\n            system_user = User.get(\\\\\\"system\\\\\\")\\\\n            \\\\n            if benefit_instrument and system_user and citizen.user:\\\\n                transfer = Transfer(\\\\n                    from_user=system_user,\\\\n                    to_user=citizen.user,\\\\n                    instrument=benefit_instrument,\\\\n                    amount=benefit_amount\\\\n                )\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"citizen_id\\\\\\": citizen.id,\\\\n                    \\\\\\"benefit_amount\\\\\\": benefit_amount,\\\\n                    \\\\\\"status\\\\\\": \\\\\\"distributed\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = distribute_social_benefits()\\\\n    print(f\\\\\\"Benefits distribution completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 06:00:42.886\\", \\"timestamp_updated\\": \\"2025-09-15 06:00:42.886\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"3\\", \\"name\\": \\"tax_collection_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nTax Collection Automation Codex\\\\nAutomatically calculates and processes tax payments for citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate tax owed by a user for a given year\\\\\\"\\\\\\"\\\\\\"\\\\n    if tax_year is None:\\\\n        tax_year = datetime.now().year\\\\n    \\\\n    # Get user\'s transfers for the tax year\\\\n    user = User.get(user_id)\\\\n    if not user:\\\\n        return {\\\\\\"error\\\\\\": \\\\\\"User not found\\\\\\"}\\\\n    \\\\n    # Calculate income from transfers received\\\\n    income_transfers = [t for t in user.transfers_to if \\\\n                       datetime.fromisoformat(t.created_at).year == tax_year]\\\\n    \\\\n    total_income = sum(t.amount for t in income_transfers)\\\\n    \\\\n    # Progressive tax calculation\\\\n    if total_income <= 10000:\\\\n        tax_rate = 0.10\\\\n    elif total_income <= 50000:\\\\n        tax_rate = 0.20\\\\n    else:\\\\n        tax_rate = 0.30\\\\n    \\\\n    tax_owed = int(total_income * tax_rate)\\\\n    \\\\n    return {\\\\n        \\\\\\"user_id\\\\\\": user_id,\\\\n        \\\\\\"tax_year\\\\\\": tax_year,\\\\n        \\\\\\"total_income\\\\\\": total_income,\\\\n        \\\\\\"tax_rate\\\\\\": tax_rate,\\\\n        \\\\\\"tax_owed\\\\\\": tax_owed,\\\\n        \\\\\\"calculated_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef process_tax_collection():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main tax collection process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all users\\\\n    users = User.get_all()\\\\n    \\\\n    for user in users:\\\\n        if user.id == \\\\\\"system\\\\\\":\\\\n            continue\\\\n            \\\\n        tax_info = calculate_tax_for_user(user.id)\\\\n        \\\\n        if \\\\\\"error\\\\\\" not in tax_info and tax_info[\\\\\\"tax_owed\\\\\\"] > 0:\\\\n            # Create tax payment transfer\\\\n            tax_instrument = Instrument.get_by_name(\\\\\\"Realm Token\\\\\\")\\\\n            if tax_instrument:\\\\n                transfer = Transfer(\\\\n                    from_user=user,\\\\n                    to_user=User.get(\\\\\\"system\\\\\\"),\\\\n                    instrument=tax_instrument,\\\\n                    amount=tax_info[\\\\\\"tax_owed\\\\\\"]\\\\n                )\\\\n                results.append({\\\\n                    \\\\\\"user_id\\\\\\": user.id,\\\\n                    \\\\\\"tax_collected\\\\\\": tax_info[\\\\\\"tax_owed\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": \\\\\\"collected\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = process_tax_collection()\\\\n    print(f\\\\\\"Tax collection completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 06:00:40.111', 'timestamp_updated': '2025-09-15 06:00:40.111', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 06:00:41.508', 'timestamp_updated': '2025-09-15 06:00:41.508', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 06:00:42.886', 'timestamp_updated': '2025-09-15 06:00:42.886', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 06:00:40.111', 'timestamp_updated': '2025-09-15 06:00:40.111', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 06:00:41.508', 'timestamp_updated': '2025-09-15 06:00:41.508', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 06:00:42.886', 'timestamp_updated': '2025-09-15 06:00:42.886', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 3 items
handle_selection
self.state.view_mode = record_list
self._relationship_cache = {}
handle_relationship_drilling
self.state.view_mode = record_detail
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = record_list
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user_profile.UserProfile'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("UserProfile", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("UserProfile", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:44.011\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:44.011\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:44.011\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:44.011\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"2\\", \\"name\\": \\"member\\", \\"description\\": \\"Member user profile\\", \\"allowed_to\\": \\"\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "2",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 07:57:44.011', 'timestamp_updated': '2025-09-15 07:57:44.011', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}, {'timestamp_created': '2025-09-15 07:57:44.011', 'timestamp_updated': '2025-09-15 07:57:44.011', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '2', 'name': 'member', 'description': 'Member user profile', 'allowed_to': ''}], 'page_num': 0, 'page_size': 10, 'total_items_count': 2, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 07:57:44.011', 'timestamp_updated': '2025-09-15 07:57:44.011', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}, {'timestamp_created': '2025-09-15 07:57:44.011', 'timestamp_updated': '2025-09-15 07:57:44.011', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '2', 'name': 'member', 'description': 'Member user profile', 'allowed_to': ''}], 'page_num': 0, 'page_size': 10, 'total_items_count': 2, 'total_pages': 1}
Loaded 2 items
handle_selection
self.state.view_mode = record_list
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user.User'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("User", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("User", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:43.899\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:43.976\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:43.899\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:43.991\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"2\\", \\"id\\": \\"user_000\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=803129\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:43.899\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:44.006\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"3\\", \\"id\\": \\"user_001\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=311903\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:43.900\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:43.970\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"4\\", \\"id\\": \\"user_002\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=587824\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:43.900\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:43.991\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"5\\", \\"id\\": \\"user_003\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=449521\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:43.900\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:43.972\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"6\\", \\"id\\": \\"user_004\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=577803\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:43.900\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:43.999\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"7\\", \\"id\\": \\"user_005\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=423308\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:43.900\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:43.964\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"8\\", \\"id\\": \\"user_006\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=172468\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:43.901\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:44.006\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"9\\", \\"id\\": \\"user_007\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=730915\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 07:57:43.901\\", \\"timestamp_updated\\": \\"2025-09-15 07:57:44.007\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"10\\", \\"id\\": \\"user_008\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=194513\\", \\"user_profile\\": \\"member\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "51",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 07:57:43.899', 'timestamp_updated': '2025-09-15 07:57:43.976', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-15 07:57:43.899', 'timestamp_updated': '2025-09-15 07:57:43.991', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=803129', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.899', 'timestamp_updated': '2025-09-15 07:57:44.006', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=311903', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.900', 'timestamp_updated': '2025-09-15 07:57:43.970', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=587824', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.900', 'timestamp_updated': '2025-09-15 07:57:43.991', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=449521', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.900', 'timestamp_updated': '2025-09-15 07:57:43.972', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=577803', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.900', 'timestamp_updated': '2025-09-15 07:57:43.999', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=423308', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.900', 'timestamp_updated': '2025-09-15 07:57:43.964', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=172468', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.901', 'timestamp_updated': '2025-09-15 07:57:44.006', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=730915', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.901', 'timestamp_updated': '2025-09-15 07:57:44.007', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=194513', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Backend result: {'items': [{'timestamp_created': '2025-09-15 07:57:43.899', 'timestamp_updated': '2025-09-15 07:57:43.976', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-15 07:57:43.899', 'timestamp_updated': '2025-09-15 07:57:43.991', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=803129', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.899', 'timestamp_updated': '2025-09-15 07:57:44.006', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=311903', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.900', 'timestamp_updated': '2025-09-15 07:57:43.970', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=587824', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.900', 'timestamp_updated': '2025-09-15 07:57:43.991', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=449521', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.900', 'timestamp_updated': '2025-09-15 07:57:43.972', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=577803', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.900', 'timestamp_updated': '2025-09-15 07:57:43.999', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=423308', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.900', 'timestamp_updated': '2025-09-15 07:57:43.964', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=172468', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.901', 'timestamp_updated': '2025-09-15 07:57:44.006', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=730915', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 07:57:43.901', 'timestamp_updated': '2025-09-15 07:57:44.007', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=194513', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Loaded 10 items
handle_selection
self.state.view_mode = record_list
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
db_command
network: None
canister: uxrrr-q7777-77774-qaaaq-cai
Effective network: local
Effective canister: uxrrr-q7777-77774-qaaaq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'status'], returncode=255, stdout='', stderr='WARN: Cannot fetch Candid interface for status, sending arguments with inferred types.\n\x1b[31mError: \x1b(B\x1b[mFailed update call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister has no update method \'status\'..\nCheck that the method being called is exported by the target canister. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#method-not-found, error code Some("IC0536")\n')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json uxrrr-q7777-77774-qaaaq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'uxrrr-q7777-77774-qaaaq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=255, stdout='', stderr='WARN: Cannot fetch Candid interface for get_objects_paginated, sending arguments with inferred types.\n\x1b[31mError: \x1b(B\x1b[mFailed update call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister has no update method \'get_objects_paginated\'..\nCheck that the method being called is exported by the target canister. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#method-not-found, error code Some("IC0536")\n')
Backend result: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': 'WARN: Cannot fetch Candid interface for get_objects_paginated, sending arguments with inferred types.\n\x1b[31mError: \x1b(B\x1b[mFailed update call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister has no update method \'get_objects_paginated\'..\nCheck that the method being called is exported by the target canister. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#method-not-found, error code Some("IC0536")\n'}
Failed to load data: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': 'WARN: Cannot fetch Candid interface for get_objects_paginated, sending arguments with inferred types.\n\x1b[31mError: \x1b(B\x1b[mFailed update call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister uxrrr-q7777-77774-qaaaq-cai: Canister has no update method \'get_objects_paginated\'..\nCheck that the method being called is exported by the target canister. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#method-not-found, error code Some("IC0536")\n'}
db_command
network: None
canister: ulvla-h7777-77774-qaacq-cai
Effective network: local
Effective canister: ulvla-h7777-77774-qaacq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:18.048\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:18.048\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"2\\", \\"name\\": \\"social_benefits_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nSocial Benefits Distribution Codex\\\\nAutomatically distributes social benefits to eligible citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime\\\\nimport json\\\\n\\\\ndef check_benefit_eligibility(citizen_id: str) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Check if a citizen is eligible for social benefits\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return {\\\\\\"eligible\\\\\\": False, \\\\\\"reason\\\\\\": \\\\\\"Citizen not found\\\\\\"}\\\\n    \\\\n    # Eligibility criteria\\\\n    criteria = {\\\\n        \\\\\\"residence_permit\\\\\\": citizen.residence_permit == \\\\\\"valid\\\\\\",\\\\n        \\\\\\"tax_compliance\\\\\\": citizen.tax_compliance in [\\\\\\"compliant\\\\\\", \\\\\\"under_review\\\\\\"],\\\\n        \\\\\\"identity_verification\\\\\\": citizen.identity_verification == \\\\\\"verified\\\\\\",\\\\n        \\\\\\"benefits_eligibility\\\\\\": citizen.public_benefits_eligibility == \\\\\\"eligible\\\\\\"\\\\n    }\\\\n    \\\\n    eligible = all(criteria.values())\\\\n    \\\\n    return {\\\\n        \\\\\\"citizen_id\\\\\\": citizen_id,\\\\n        \\\\\\"eligible\\\\\\": eligible,\\\\n        \\\\\\"criteria_met\\\\\\": criteria,\\\\n        \\\\\\"checked_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef calculate_benefit_amount(citizen_id: str) -> int:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate benefit amount based on citizen status\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return 0\\\\n    \\\\n    # Base benefit amount\\\\n    base_amount = 500\\\\n    \\\\n    # Adjustments based on status\\\\n    if citizen.criminal_record == \\\\\\"clean\\\\\\":\\\\n        base_amount += 100\\\\n    \\\\n    if citizen.voting_eligibility == \\\\\\"eligible\\\\\\":\\\\n        base_amount += 50\\\\n    \\\\n    return base_amount\\\\n\\\\ndef distribute_social_benefits():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main social benefits distribution process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all citizens\\\\n    citizens = Citizen.get_all()\\\\n    \\\\n    for citizen in citizens:\\\\n        eligibility = check_benefit_eligibility(citizen.id)\\\\n        \\\\n        if eligibility[\\\\\\"eligible\\\\\\"]:\\\\n            benefit_amount = calculate_benefit_amount(citizen.id)\\\\n            \\\\n            # Create benefit transfer\\\\n            benefit_instrument = Instrument.get_by_name(\\\\\\"Service Credit\\\\\\")\\\\n            system_user = User.get(\\\\\\"system\\\\\\")\\\\n            \\\\n            if benefit_instrument and system_user and citizen.user:\\\\n                transfer = Transfer(\\\\n                    from_user=system_user,\\\\n                    to_user=citizen.user,\\\\n                    instrument=benefit_instrument,\\\\n                    amount=benefit_amount\\\\n                )\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"citizen_id\\\\\\": citizen.id,\\\\n                    \\\\\\"benefit_amount\\\\\\": benefit_amount,\\\\n                    \\\\\\"status\\\\\\": \\\\\\"distributed\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = distribute_social_benefits()\\\\n    print(f\\\\\\"Benefits distribution completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:19.465\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:19.465\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"3\\", \\"name\\": \\"tax_collection_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nTax Collection Automation Codex\\\\nAutomatically calculates and processes tax payments for citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate tax owed by a user for a given year\\\\\\"\\\\\\"\\\\\\"\\\\n    if tax_year is None:\\\\n        tax_year = datetime.now().year\\\\n    \\\\n    # Get user\'s transfers for the tax year\\\\n    user = User.get(user_id)\\\\n    if not user:\\\\n        return {\\\\\\"error\\\\\\": \\\\\\"User not found\\\\\\"}\\\\n    \\\\n    # Calculate income from transfers received\\\\n    income_transfers = [t for t in user.transfers_to if \\\\n                       datetime.fromisoformat(t.created_at).year == tax_year]\\\\n    \\\\n    total_income = sum(t.amount for t in income_transfers)\\\\n    \\\\n    # Progressive tax calculation\\\\n    if total_income <= 10000:\\\\n        tax_rate = 0.10\\\\n    elif total_income <= 50000:\\\\n        tax_rate = 0.20\\\\n    else:\\\\n        tax_rate = 0.30\\\\n    \\\\n    tax_owed = int(total_income * tax_rate)\\\\n    \\\\n    return {\\\\n        \\\\\\"user_id\\\\\\": user_id,\\\\n        \\\\\\"tax_year\\\\\\": tax_year,\\\\n        \\\\\\"total_income\\\\\\": total_income,\\\\n        \\\\\\"tax_rate\\\\\\": tax_rate,\\\\n        \\\\\\"tax_owed\\\\\\": tax_owed,\\\\n        \\\\\\"calculated_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef process_tax_collection():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main tax collection process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all users\\\\n    users = User.get_all()\\\\n    \\\\n    for user in users:\\\\n        if user.id == \\\\\\"system\\\\\\":\\\\n            continue\\\\n            \\\\n        tax_info = calculate_tax_for_user(user.id)\\\\n        \\\\n        if \\\\\\"error\\\\\\" not in tax_info and tax_info[\\\\\\"tax_owed\\\\\\"] > 0:\\\\n            # Create tax payment transfer\\\\n            tax_instrument = Instrument.get_by_name(\\\\\\"Realm Token\\\\\\")\\\\n            if tax_instrument:\\\\n                transfer = Transfer(\\\\n                    from_user=user,\\\\n                    to_user=User.get(\\\\\\"system\\\\\\"),\\\\n                    instrument=tax_instrument,\\\\n                    amount=tax_info[\\\\\\"tax_owed\\\\\\"]\\\\n                )\\\\n                results.append({\\\\n                    \\\\\\"user_id\\\\\\": user.id,\\\\n                    \\\\\\"tax_collected\\\\\\": tax_info[\\\\\\"tax_owed\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": \\\\\\"collected\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = process_tax_collection()\\\\n    print(f\\\\\\"Tax collection completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 3 items
handle_selection
self.state.view_mode = record_list
self._relationship_cache = {}
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = record_list
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = record_list
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = record_list
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.land.Land'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 10)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
Backend result: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
Failed to load data: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.realm.Realm'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 1, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 1, 'total_pages': 1}
Loaded 1 items
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:18.048\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:18.048\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"2\\", \\"name\\": \\"social_benefits_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nSocial Benefits Distribution Codex\\\\nAutomatically distributes social benefits to eligible citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime\\\\nimport json\\\\n\\\\ndef check_benefit_eligibility(citizen_id: str) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Check if a citizen is eligible for social benefits\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return {\\\\\\"eligible\\\\\\": False, \\\\\\"reason\\\\\\": \\\\\\"Citizen not found\\\\\\"}\\\\n    \\\\n    # Eligibility criteria\\\\n    criteria = {\\\\n        \\\\\\"residence_permit\\\\\\": citizen.residence_permit == \\\\\\"valid\\\\\\",\\\\n        \\\\\\"tax_compliance\\\\\\": citizen.tax_compliance in [\\\\\\"compliant\\\\\\", \\\\\\"under_review\\\\\\"],\\\\n        \\\\\\"identity_verification\\\\\\": citizen.identity_verification == \\\\\\"verified\\\\\\",\\\\n        \\\\\\"benefits_eligibility\\\\\\": citizen.public_benefits_eligibility == \\\\\\"eligible\\\\\\"\\\\n    }\\\\n    \\\\n    eligible = all(criteria.values())\\\\n    \\\\n    return {\\\\n        \\\\\\"citizen_id\\\\\\": citizen_id,\\\\n        \\\\\\"eligible\\\\\\": eligible,\\\\n        \\\\\\"criteria_met\\\\\\": criteria,\\\\n        \\\\\\"checked_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef calculate_benefit_amount(citizen_id: str) -> int:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate benefit amount based on citizen status\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return 0\\\\n    \\\\n    # Base benefit amount\\\\n    base_amount = 500\\\\n    \\\\n    # Adjustments based on status\\\\n    if citizen.criminal_record == \\\\\\"clean\\\\\\":\\\\n        base_amount += 100\\\\n    \\\\n    if citizen.voting_eligibility == \\\\\\"eligible\\\\\\":\\\\n        base_amount += 50\\\\n    \\\\n    return base_amount\\\\n\\\\ndef distribute_social_benefits():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main social benefits distribution process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all citizens\\\\n    citizens = Citizen.get_all()\\\\n    \\\\n    for citizen in citizens:\\\\n        eligibility = check_benefit_eligibility(citizen.id)\\\\n        \\\\n        if eligibility[\\\\\\"eligible\\\\\\"]:\\\\n            benefit_amount = calculate_benefit_amount(citizen.id)\\\\n            \\\\n            # Create benefit transfer\\\\n            benefit_instrument = Instrument.get_by_name(\\\\\\"Service Credit\\\\\\")\\\\n            system_user = User.get(\\\\\\"system\\\\\\")\\\\n            \\\\n            if benefit_instrument and system_user and citizen.user:\\\\n                transfer = Transfer(\\\\n                    from_user=system_user,\\\\n                    to_user=citizen.user,\\\\n                    instrument=benefit_instrument,\\\\n                    amount=benefit_amount\\\\n                )\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"citizen_id\\\\\\": citizen.id,\\\\n                    \\\\\\"benefit_amount\\\\\\": benefit_amount,\\\\n                    \\\\\\"status\\\\\\": \\\\\\"distributed\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = distribute_social_benefits()\\\\n    print(f\\\\\\"Benefits distribution completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:19.465\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:19.465\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"3\\", \\"name\\": \\"tax_collection_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nTax Collection Automation Codex\\\\nAutomatically calculates and processes tax payments for citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate tax owed by a user for a given year\\\\\\"\\\\\\"\\\\\\"\\\\n    if tax_year is None:\\\\n        tax_year = datetime.now().year\\\\n    \\\\n    # Get user\'s transfers for the tax year\\\\n    user = User.get(user_id)\\\\n    if not user:\\\\n        return {\\\\\\"error\\\\\\": \\\\\\"User not found\\\\\\"}\\\\n    \\\\n    # Calculate income from transfers received\\\\n    income_transfers = [t for t in user.transfers_to if \\\\n                       datetime.fromisoformat(t.created_at).year == tax_year]\\\\n    \\\\n    total_income = sum(t.amount for t in income_transfers)\\\\n    \\\\n    # Progressive tax calculation\\\\n    if total_income <= 10000:\\\\n        tax_rate = 0.10\\\\n    elif total_income <= 50000:\\\\n        tax_rate = 0.20\\\\n    else:\\\\n        tax_rate = 0.30\\\\n    \\\\n    tax_owed = int(total_income * tax_rate)\\\\n    \\\\n    return {\\\\n        \\\\\\"user_id\\\\\\": user_id,\\\\n        \\\\\\"tax_year\\\\\\": tax_year,\\\\n        \\\\\\"total_income\\\\\\": total_income,\\\\n        \\\\\\"tax_rate\\\\\\": tax_rate,\\\\n        \\\\\\"tax_owed\\\\\\": tax_owed,\\\\n        \\\\\\"calculated_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef process_tax_collection():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main tax collection process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all users\\\\n    users = User.get_all()\\\\n    \\\\n    for user in users:\\\\n        if user.id == \\\\\\"system\\\\\\":\\\\n            continue\\\\n            \\\\n        tax_info = calculate_tax_for_user(user.id)\\\\n        \\\\n        if \\\\\\"error\\\\\\" not in tax_info and tax_info[\\\\\\"tax_owed\\\\\\"] > 0:\\\\n            # Create tax payment transfer\\\\n            tax_instrument = Instrument.get_by_name(\\\\\\"Realm Token\\\\\\")\\\\n            if tax_instrument:\\\\n                transfer = Transfer(\\\\n                    from_user=user,\\\\n                    to_user=User.get(\\\\\\"system\\\\\\"),\\\\n                    instrument=tax_instrument,\\\\n                    amount=tax_info[\\\\\\"tax_owed\\\\\\"]\\\\n                )\\\\n                results.append({\\\\n                    \\\\\\"user_id\\\\\\": user.id,\\\\n                    \\\\\\"tax_collected\\\\\\": tax_info[\\\\\\"tax_owed\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": \\\\\\"collected\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = process_tax_collection()\\\\n    print(f\\\\\\"Tax collection completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 3 items
handle_back_navigation
self.state.navigation_stack = []
db_command
network: None
canister: ulvla-h7777-77774-qaacq-cai
Effective network: local
Effective canister: ulvla-h7777-77774-qaacq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:18.048\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:18.048\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"2\\", \\"name\\": \\"social_benefits_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nSocial Benefits Distribution Codex\\\\nAutomatically distributes social benefits to eligible citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime\\\\nimport json\\\\n\\\\ndef check_benefit_eligibility(citizen_id: str) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Check if a citizen is eligible for social benefits\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return {\\\\\\"eligible\\\\\\": False, \\\\\\"reason\\\\\\": \\\\\\"Citizen not found\\\\\\"}\\\\n    \\\\n    # Eligibility criteria\\\\n    criteria = {\\\\n        \\\\\\"residence_permit\\\\\\": citizen.residence_permit == \\\\\\"valid\\\\\\",\\\\n        \\\\\\"tax_compliance\\\\\\": citizen.tax_compliance in [\\\\\\"compliant\\\\\\", \\\\\\"under_review\\\\\\"],\\\\n        \\\\\\"identity_verification\\\\\\": citizen.identity_verification == \\\\\\"verified\\\\\\",\\\\n        \\\\\\"benefits_eligibility\\\\\\": citizen.public_benefits_eligibility == \\\\\\"eligible\\\\\\"\\\\n    }\\\\n    \\\\n    eligible = all(criteria.values())\\\\n    \\\\n    return {\\\\n        \\\\\\"citizen_id\\\\\\": citizen_id,\\\\n        \\\\\\"eligible\\\\\\": eligible,\\\\n        \\\\\\"criteria_met\\\\\\": criteria,\\\\n        \\\\\\"checked_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef calculate_benefit_amount(citizen_id: str) -> int:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate benefit amount based on citizen status\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return 0\\\\n    \\\\n    # Base benefit amount\\\\n    base_amount = 500\\\\n    \\\\n    # Adjustments based on status\\\\n    if citizen.criminal_record == \\\\\\"clean\\\\\\":\\\\n        base_amount += 100\\\\n    \\\\n    if citizen.voting_eligibility == \\\\\\"eligible\\\\\\":\\\\n        base_amount += 50\\\\n    \\\\n    return base_amount\\\\n\\\\ndef distribute_social_benefits():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main social benefits distribution process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all citizens\\\\n    citizens = Citizen.get_all()\\\\n    \\\\n    for citizen in citizens:\\\\n        eligibility = check_benefit_eligibility(citizen.id)\\\\n        \\\\n        if eligibility[\\\\\\"eligible\\\\\\"]:\\\\n            benefit_amount = calculate_benefit_amount(citizen.id)\\\\n            \\\\n            # Create benefit transfer\\\\n            benefit_instrument = Instrument.get_by_name(\\\\\\"Service Credit\\\\\\")\\\\n            system_user = User.get(\\\\\\"system\\\\\\")\\\\n            \\\\n            if benefit_instrument and system_user and citizen.user:\\\\n                transfer = Transfer(\\\\n                    from_user=system_user,\\\\n                    to_user=citizen.user,\\\\n                    instrument=benefit_instrument,\\\\n                    amount=benefit_amount\\\\n                )\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"citizen_id\\\\\\": citizen.id,\\\\n                    \\\\\\"benefit_amount\\\\\\": benefit_amount,\\\\n                    \\\\\\"status\\\\\\": \\\\\\"distributed\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = distribute_social_benefits()\\\\n    print(f\\\\\\"Benefits distribution completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:19.465\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:19.465\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"3\\", \\"name\\": \\"tax_collection_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nTax Collection Automation Codex\\\\nAutomatically calculates and processes tax payments for citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate tax owed by a user for a given year\\\\\\"\\\\\\"\\\\\\"\\\\n    if tax_year is None:\\\\n        tax_year = datetime.now().year\\\\n    \\\\n    # Get user\'s transfers for the tax year\\\\n    user = User.get(user_id)\\\\n    if not user:\\\\n        return {\\\\\\"error\\\\\\": \\\\\\"User not found\\\\\\"}\\\\n    \\\\n    # Calculate income from transfers received\\\\n    income_transfers = [t for t in user.transfers_to if \\\\n                       datetime.fromisoformat(t.created_at).year == tax_year]\\\\n    \\\\n    total_income = sum(t.amount for t in income_transfers)\\\\n    \\\\n    # Progressive tax calculation\\\\n    if total_income <= 10000:\\\\n        tax_rate = 0.10\\\\n    elif total_income <= 50000:\\\\n        tax_rate = 0.20\\\\n    else:\\\\n        tax_rate = 0.30\\\\n    \\\\n    tax_owed = int(total_income * tax_rate)\\\\n    \\\\n    return {\\\\n        \\\\\\"user_id\\\\\\": user_id,\\\\n        \\\\\\"tax_year\\\\\\": tax_year,\\\\n        \\\\\\"total_income\\\\\\": total_income,\\\\n        \\\\\\"tax_rate\\\\\\": tax_rate,\\\\n        \\\\\\"tax_owed\\\\\\": tax_owed,\\\\n        \\\\\\"calculated_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef process_tax_collection():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main tax collection process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all users\\\\n    users = User.get_all()\\\\n    \\\\n    for user in users:\\\\n        if user.id == \\\\\\"system\\\\\\":\\\\n            continue\\\\n            \\\\n        tax_info = calculate_tax_for_user(user.id)\\\\n        \\\\n        if \\\\\\"error\\\\\\" not in tax_info and tax_info[\\\\\\"tax_owed\\\\\\"] > 0:\\\\n            # Create tax payment transfer\\\\n            tax_instrument = Instrument.get_by_name(\\\\\\"Realm Token\\\\\\")\\\\n            if tax_instrument:\\\\n                transfer = Transfer(\\\\n                    from_user=user,\\\\n                    to_user=User.get(\\\\\\"system\\\\\\"),\\\\n                    instrument=tax_instrument,\\\\n                    amount=tax_info[\\\\\\"tax_owed\\\\\\"]\\\\n                )\\\\n                results.append({\\\\n                    \\\\\\"user_id\\\\\\": user.id,\\\\n                    \\\\\\"tax_collected\\\\\\": tax_info[\\\\\\"tax_owed\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": \\\\\\"collected\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = process_tax_collection()\\\\n    print(f\\\\\\"Tax collection completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 3 items
handle_back_navigation
self.state.navigation_stack = []
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
db_command
network: None
canister: ulvla-h7777-77774-qaacq-cai
Effective network: local
Effective canister: ulvla-h7777-77774-qaacq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.dispute.Dispute'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"2\\", \\"status\\": \\"open\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"3\\", \\"status\\": \\"closed\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"4\\", \\"status\\": \\"open\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"5\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"6\\", \\"status\\": \\"resolved\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"7\\", \\"status\\": \\"appealed\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"8\\", \\"status\\": \\"resolved\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"9\\", \\"status\\": \\"open\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"10\\", \\"status\\": \\"closed\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "10",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '2', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '3', 'status': 'closed', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '4', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '5', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '6', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '7', 'status': 'appealed', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '8', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '9', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '10', 'status': 'closed', 'metadata': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 10, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '2', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '3', 'status': 'closed', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '4', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '5', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '6', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '7', 'status': 'appealed', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '8', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '9', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '10', 'status': 'closed', 'metadata': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 10, 'total_pages': 1}
Loaded 10 items
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:18.048\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:18.048\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"2\\", \\"name\\": \\"social_benefits_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nSocial Benefits Distribution Codex\\\\nAutomatically distributes social benefits to eligible citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime\\\\nimport json\\\\n\\\\ndef check_benefit_eligibility(citizen_id: str) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Check if a citizen is eligible for social benefits\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return {\\\\\\"eligible\\\\\\": False, \\\\\\"reason\\\\\\": \\\\\\"Citizen not found\\\\\\"}\\\\n    \\\\n    # Eligibility criteria\\\\n    criteria = {\\\\n        \\\\\\"residence_permit\\\\\\": citizen.residence_permit == \\\\\\"valid\\\\\\",\\\\n        \\\\\\"tax_compliance\\\\\\": citizen.tax_compliance in [\\\\\\"compliant\\\\\\", \\\\\\"under_review\\\\\\"],\\\\n        \\\\\\"identity_verification\\\\\\": citizen.identity_verification == \\\\\\"verified\\\\\\",\\\\n        \\\\\\"benefits_eligibility\\\\\\": citizen.public_benefits_eligibility == \\\\\\"eligible\\\\\\"\\\\n    }\\\\n    \\\\n    eligible = all(criteria.values())\\\\n    \\\\n    return {\\\\n        \\\\\\"citizen_id\\\\\\": citizen_id,\\\\n        \\\\\\"eligible\\\\\\": eligible,\\\\n        \\\\\\"criteria_met\\\\\\": criteria,\\\\n        \\\\\\"checked_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef calculate_benefit_amount(citizen_id: str) -> int:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate benefit amount based on citizen status\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return 0\\\\n    \\\\n    # Base benefit amount\\\\n    base_amount = 500\\\\n    \\\\n    # Adjustments based on status\\\\n    if citizen.criminal_record == \\\\\\"clean\\\\\\":\\\\n        base_amount += 100\\\\n    \\\\n    if citizen.voting_eligibility == \\\\\\"eligible\\\\\\":\\\\n        base_amount += 50\\\\n    \\\\n    return base_amount\\\\n\\\\ndef distribute_social_benefits():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main social benefits distribution process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all citizens\\\\n    citizens = Citizen.get_all()\\\\n    \\\\n    for citizen in citizens:\\\\n        eligibility = check_benefit_eligibility(citizen.id)\\\\n        \\\\n        if eligibility[\\\\\\"eligible\\\\\\"]:\\\\n            benefit_amount = calculate_benefit_amount(citizen.id)\\\\n            \\\\n            # Create benefit transfer\\\\n            benefit_instrument = Instrument.get_by_name(\\\\\\"Service Credit\\\\\\")\\\\n            system_user = User.get(\\\\\\"system\\\\\\")\\\\n            \\\\n            if benefit_instrument and system_user and citizen.user:\\\\n                transfer = Transfer(\\\\n                    from_user=system_user,\\\\n                    to_user=citizen.user,\\\\n                    instrument=benefit_instrument,\\\\n                    amount=benefit_amount\\\\n                )\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"citizen_id\\\\\\": citizen.id,\\\\n                    \\\\\\"benefit_amount\\\\\\": benefit_amount,\\\\n                    \\\\\\"status\\\\\\": \\\\\\"distributed\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = distribute_social_benefits()\\\\n    print(f\\\\\\"Benefits distribution completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:19.465\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:19.465\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"3\\", \\"name\\": \\"tax_collection_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nTax Collection Automation Codex\\\\nAutomatically calculates and processes tax payments for citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate tax owed by a user for a given year\\\\\\"\\\\\\"\\\\\\"\\\\n    if tax_year is None:\\\\n        tax_year = datetime.now().year\\\\n    \\\\n    # Get user\'s transfers for the tax year\\\\n    user = User.get(user_id)\\\\n    if not user:\\\\n        return {\\\\\\"error\\\\\\": \\\\\\"User not found\\\\\\"}\\\\n    \\\\n    # Calculate income from transfers received\\\\n    income_transfers = [t for t in user.transfers_to if \\\\n                       datetime.fromisoformat(t.created_at).year == tax_year]\\\\n    \\\\n    total_income = sum(t.amount for t in income_transfers)\\\\n    \\\\n    # Progressive tax calculation\\\\n    if total_income <= 10000:\\\\n        tax_rate = 0.10\\\\n    elif total_income <= 50000:\\\\n        tax_rate = 0.20\\\\n    else:\\\\n        tax_rate = 0.30\\\\n    \\\\n    tax_owed = int(total_income * tax_rate)\\\\n    \\\\n    return {\\\\n        \\\\\\"user_id\\\\\\": user_id,\\\\n        \\\\\\"tax_year\\\\\\": tax_year,\\\\n        \\\\\\"total_income\\\\\\": total_income,\\\\n        \\\\\\"tax_rate\\\\\\": tax_rate,\\\\n        \\\\\\"tax_owed\\\\\\": tax_owed,\\\\n        \\\\\\"calculated_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef process_tax_collection():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main tax collection process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all users\\\\n    users = User.get_all()\\\\n    \\\\n    for user in users:\\\\n        if user.id == \\\\\\"system\\\\\\":\\\\n            continue\\\\n            \\\\n        tax_info = calculate_tax_for_user(user.id)\\\\n        \\\\n        if \\\\\\"error\\\\\\" not in tax_info and tax_info[\\\\\\"tax_owed\\\\\\"] > 0:\\\\n            # Create tax payment transfer\\\\n            tax_instrument = Instrument.get_by_name(\\\\\\"Realm Token\\\\\\")\\\\n            if tax_instrument:\\\\n                transfer = Transfer(\\\\n                    from_user=user,\\\\n                    to_user=User.get(\\\\\\"system\\\\\\"),\\\\n                    instrument=tax_instrument,\\\\n                    amount=tax_info[\\\\\\"tax_owed\\\\\\"]\\\\n                )\\\\n                results.append({\\\\n                    \\\\\\"user_id\\\\\\": user.id,\\\\n                    \\\\\\"tax_collected\\\\\\": tax_info[\\\\\\"tax_owed\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": \\\\\\"collected\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = process_tax_collection()\\\\n    print(f\\\\\\"Tax collection completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 3 items
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.land.Land'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 10)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
Backend result: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
Failed to load data: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user.User'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.729\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"2\\", \\"id\\": \\"user_000\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=683976\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.733\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"3\\", \\"id\\": \\"user_001\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=190437\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.656\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"4\\", \\"id\\": \\"user_002\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=931989\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.731\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"5\\", \\"id\\": \\"user_003\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=200036\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.729\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"6\\", \\"id\\": \\"user_004\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=613194\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.735\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"7\\", \\"id\\": \\"user_005\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=50527\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.728\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"8\\", \\"id\\": \\"user_006\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=283471\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.627\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.727\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"9\\", \\"id\\": \\"user_007\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=578745\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.627\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.731\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"10\\", \\"id\\": \\"user_008\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=136064\\", \\"user_profile\\": \\"member\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "51",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=683976', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.733', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=190437', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.656', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=931989', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=200036', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=613194', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.735', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=50527', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.728', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=283471', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.727', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=578745', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=136064', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=683976', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.733', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=190437', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.656', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=931989', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=200036', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=613194', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.735', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=50527', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.728', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=283471', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.727', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=578745', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=136064', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Loaded 10 items
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user_profile.UserProfile'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"2\\", \\"name\\": \\"member\\", \\"description\\": \\"Member user profile\\", \\"allowed_to\\": \\"\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "2",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}, {'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '2', 'name': 'member', 'description': 'Member user profile', 'allowed_to': ''}], 'page_num': 0, 'page_size': 10, 'total_items_count': 2, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}, {'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '2', 'name': 'member', 'description': 'Member user profile', 'allowed_to': ''}], 'page_num': 0, 'page_size': 10, 'total_items_count': 2, 'total_pages': 1}
Loaded 2 items
handle_back_navigation
self.state.navigation_stack = []
db_command
network: None
canister: ulvla-h7777-77774-qaacq-cai
Effective network: local
Effective canister: ulvla-h7777-77774-qaacq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user_profile.Profiles'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 10)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
Backend result: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
Failed to load data: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user_profile.Operations'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 10)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
Backend result: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
Failed to load data: {'items': [], 'total_items_count': 0, 'total_pages': 1, 'page_num': 0, 'page_size': 10, 'error': '\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n'}
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user.User'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.729\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"2\\", \\"id\\": \\"user_000\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=683976\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.733\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"3\\", \\"id\\": \\"user_001\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=190437\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.656\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"4\\", \\"id\\": \\"user_002\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=931989\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.731\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"5\\", \\"id\\": \\"user_003\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=200036\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.729\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"6\\", \\"id\\": \\"user_004\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=613194\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.735\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"7\\", \\"id\\": \\"user_005\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=50527\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.728\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"8\\", \\"id\\": \\"user_006\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=283471\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.627\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.727\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"9\\", \\"id\\": \\"user_007\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=578745\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.627\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.731\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"10\\", \\"id\\": \\"user_008\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=136064\\", \\"user_profile\\": \\"member\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "51",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=683976', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.733', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=190437', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.656', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=931989', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=200036', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=613194', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.735', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=50527', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.728', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=283471', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.727', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=578745', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=136064', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=683976', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.733', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=190437', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.656', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=931989', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=200036', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=613194', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.735', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=50527', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.728', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=283471', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.727', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=578745', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=136064', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Loaded 10 items
db_command
network: None
canister: ulvla-h7777-77774-qaacq-cai
Effective network: local
Effective canister: ulvla-h7777-77774-qaacq-cai
self._ggg_classes = [<class 'ggg.codex.Codex'>, <class 'ggg.contract.Contract'>, <class 'ggg.dispute.Dispute'>, <class 'ggg.instrument.Instrument'>, <class 'ggg.land.Land'>, <class 'ggg.land.LandType'>, <class 'ggg.license.License'>, <class 'ggg.mandate.Mandate'>, <class 'ggg.organization.Organization'>, <class 'ggg.permission.Permission'>, <class 'ggg.proposal.Proposal'>, <class 'ggg.realm.Realm'>, <class 'ggg.task.Task'>, <class 'ggg.task_schedule.TaskSchedule'>, <class 'ggg.trade.Trade'>, <class 'ggg.user.User'>, <class 'ggg.user_profile.UserProfile'>, <class 'ggg.user_profile.Profiles'>, <class 'ggg.user_profile.Operations'>, <class 'ggg.vote.Vote'>, <class 'ggg.transfer.Transfer'>, <class 'ggg.human.Human'>, <class 'ggg.citizen.Citizen'>, <class 'ggg.identity.Identity'>, <class 'ggg.treasury.Treasury'>]
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai status
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'status'], returncode=0, stdout='{\n  "data": {\n    "status": {\n      "codexes_count": "3",\n      "commit": "COMMIT_HASH_PLACEHOLDER",\n      "demo_mode": false,\n      "disputes_count": "10",\n      "extensions": [\n        "extension_manifests",\n        "vault_manager",\n        "llm_chat",\n        "test_bench",\n        "justice_litigation",\n        "demo_loader",\n        "notifications",\n        "citizen_dashboard",\n        "land_registry",\n        "passport_verification",\n        "voting",\n        "bulk_importer",\n        "admin_dashboard",\n        "erd_explorer",\n        "extension_imports",\n        "registry"\n      ],\n      "instruments_count": "6",\n      "licenses_count": "0",\n      "mandates_count": "6",\n      "organizations_count": "5",\n      "proposals_count": "0",\n      "realms_count": "1",\n      "status": "ok",\n      "tasks_count": "0",\n      "trades_count": "0",\n      "transfers_count": "100",\n      "users_count": "51",\n      "version": "VERSION_PLACEHOLDER",\n      "votes_count": "0"\n    }\n  },\n  "success": true\n}\n', stderr='')
Connected to backend canister

call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "3",\n        "total_pages": "3"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 3, 'total_pages': 3}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Contract", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Contract", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "10",\n        "total_pages": "10"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 10, 'total_pages': 10}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Instrument", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Instrument", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.671\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.726\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Instrument\\", \\"_id\\": \\"1\\", \\"name\\": \\"Bitcoin\\", \\"principal_id\\": \\"kpaa2ejxtwp4qcp2t4deyd6a5oe-cai\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.671', 'timestamp_updated': '2025-09-15 19:13:34.726', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Instrument', '_id': '1', 'name': 'Bitcoin', 'principal_id': 'kpaa2ejxtwp4qcp2t4deyd6a5oe-cai', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Land", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Land", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("LandType", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("LandType", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("License", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("License", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Mandate", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Mandate", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Mandate\\", \\"_id\\": \\"1\\", \\"name\\": \\"Tax Collection\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "6",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Mandate', '_id': '1', 'name': 'Tax Collection', 'metadata': None}], 'page_num': 0, 'page_size': 1, 'total_items_count': 6, 'total_pages': 6}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Organization", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Organization", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.670\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.670\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Organization\\", \\"_id\\": \\"1\\", \\"name\\": \\"Digital Services Corp #001\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "5",\n        "total_pages": "5"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.670', 'timestamp_updated': '2025-09-15 19:13:34.670', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Organization', '_id': '1', 'name': 'Digital Services Corp #001'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 5, 'total_pages': 5}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Permission", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Permission", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Proposal", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Proposal", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Realm", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Realm", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Realm\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm\\", \\"description\\": \\"Generated demo realm with 51 citizens and 5 organizations\\", \\"id\\": \\"0\\", \\"created_at\\": \\"2025-09-15T19:13:34.740236\\", \\"status\\": \\"active\\", \\"governance_type\\": \\"democratic\\", \\"population\\": 51, \\"organization_count\\": 5, \\"settings\\": {\\"voting_period_days\\": 7, \\"proposal_threshold\\": 0.1, \\"quorum_percentage\\": 0.3, \\"tax_rate\\": 0.15, \\"ubi_amount\\": 1000}, \\"treasury\\": \\"2\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "1",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Realm', '_id': '1', 'name': 'Generated Demo Realm', 'description': 'Generated demo realm with 51 citizens and 5 organizations', 'id': '0', 'created_at': '2025-09-15T19:13:34.740236', 'status': 'active', 'governance_type': 'democratic', 'population': 51, 'organization_count': 5, 'settings': {'voting_period_days': 7, 'proposal_threshold': 0.1, 'quorum_percentage': 0.3, 'tax_rate': 0.15, 'ubi_amount': 1000}, 'treasury': '2'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 1, 'total_pages': 1}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Task", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Task", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("TaskSchedule", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("TaskSchedule", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Trade", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Trade", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "51",\n        "total_pages": "51"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 51, 'total_pages': 51}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("UserProfile", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("UserProfile", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.739\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.739\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"UserProfile\\", \\"_id\\": \\"1\\", \\"name\\": \\"admin\\", \\"description\\": \\"Admin user profile\\", \\"allowed_to\\": \\"all\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.739', 'timestamp_updated': '2025-09-15 19:13:34.739', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'UserProfile', '_id': '1', 'name': 'admin', 'description': 'Admin user profile', 'allowed_to': 'all'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Profiles", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Profiles", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Operations", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Operations", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Vote", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Vote", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "0",\n        "total_pages": "0"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [], 'page_num': 0, 'page_size': 1, 'total_items_count': 0, 'total_pages': 0}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Transfer", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Transfer", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.673\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.673\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Transfer\\", \\"_id\\": \\"1\\", \\"amount\\": 8208}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "100",\n        "total_pages": "100"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.673', 'timestamp_updated': '2025-09-15 19:13:34.673', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Transfer', '_id': '1', 'amount': 8208}], 'page_num': 0, 'page_size': 1, 'total_items_count': 100, 'total_pages': 100}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Human", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Human", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.636\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.636\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Human\\", \\"_id\\": \\"1\\", \\"name\\": \\"Nina Adams\\", \\"date_of_birth\\": \\"1952-12-14\\", \\"user_id\\": \\"user_000\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "49",\n        "total_pages": "49"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.636', 'timestamp_updated': '2025-09-15 19:13:34.636', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Human', '_id': '1', 'name': 'Nina Adams', 'date_of_birth': '1952-12-14', 'user_id': 'user_000'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 49, 'total_pages': 49}
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Citizen", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Citizen", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Identity", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Identity", 0, 1)'], returncode=255, stdout='', stderr='\x1b[31mError: \x1b(B\x1b[mFailed query call.\n\x1b[33mCaused by: \x1b(B\x1b[mThe replica returned a rejection error: reject code CanisterError, reject message Error from Canister ulvla-h7777-77774-qaacq-cai: Canister called `ic0.trap` with message: \'TypeError: Enum variant does not exist\'\nCanister Backtrace:\nic_cdk::api::trap\n<core::result::Result<T,alloc::string::String> as realm_backend::UnwrapOrTrap<T>>::unwrap_or_trap\nrealm_backend::__canister_method__cdk_user_defined_get_objects_paginated::{{closure}}\nic_cdk::futures::spawn\ncanister_query get_objects_paginated\ncanister_query get_objects_paginated.command_export\n.\nConsider gracefully handling failures from this canister or altering the canister to handle exceptions. See documentation: https://internetcomputer.org/docs/current/references/execution-errors#trapped-explicitly, error code Some("IC0503")\n')
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Treasury", 0, 1)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Treasury", 0, 1)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.740\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.740\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Treasury\\", \\"_id\\": \\"1\\", \\"name\\": \\"Generated Demo Realm Treasury\\", \\"vault_principal_id\\": null, \\"created_at\\": \\"2025-09-15T19:13:34.740504\\", \\"updated_at\\": \\"2025-09-15T19:13:34.740507\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "1",\n        "total_items_count": "2",\n        "total_pages": "2"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.740', 'timestamp_updated': '2025-09-15 19:13:34.740', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Treasury', '_id': '1', 'name': 'Generated Demo Realm Treasury', 'vault_principal_id': None, 'created_at': '2025-09-15T19:13:34.740504', 'updated_at': '2025-09-15T19:13:34.740507'}], 'page_num': 0, 'page_size': 1, 'total_items_count': 2, 'total_pages': 2}
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:18.048\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:18.048\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"2\\", \\"name\\": \\"social_benefits_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nSocial Benefits Distribution Codex\\\\nAutomatically distributes social benefits to eligible citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime\\\\nimport json\\\\n\\\\ndef check_benefit_eligibility(citizen_id: str) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Check if a citizen is eligible for social benefits\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return {\\\\\\"eligible\\\\\\": False, \\\\\\"reason\\\\\\": \\\\\\"Citizen not found\\\\\\"}\\\\n    \\\\n    # Eligibility criteria\\\\n    criteria = {\\\\n        \\\\\\"residence_permit\\\\\\": citizen.residence_permit == \\\\\\"valid\\\\\\",\\\\n        \\\\\\"tax_compliance\\\\\\": citizen.tax_compliance in [\\\\\\"compliant\\\\\\", \\\\\\"under_review\\\\\\"],\\\\n        \\\\\\"identity_verification\\\\\\": citizen.identity_verification == \\\\\\"verified\\\\\\",\\\\n        \\\\\\"benefits_eligibility\\\\\\": citizen.public_benefits_eligibility == \\\\\\"eligible\\\\\\"\\\\n    }\\\\n    \\\\n    eligible = all(criteria.values())\\\\n    \\\\n    return {\\\\n        \\\\\\"citizen_id\\\\\\": citizen_id,\\\\n        \\\\\\"eligible\\\\\\": eligible,\\\\n        \\\\\\"criteria_met\\\\\\": criteria,\\\\n        \\\\\\"checked_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef calculate_benefit_amount(citizen_id: str) -> int:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate benefit amount based on citizen status\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return 0\\\\n    \\\\n    # Base benefit amount\\\\n    base_amount = 500\\\\n    \\\\n    # Adjustments based on status\\\\n    if citizen.criminal_record == \\\\\\"clean\\\\\\":\\\\n        base_amount += 100\\\\n    \\\\n    if citizen.voting_eligibility == \\\\\\"eligible\\\\\\":\\\\n        base_amount += 50\\\\n    \\\\n    return base_amount\\\\n\\\\ndef distribute_social_benefits():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main social benefits distribution process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all citizens\\\\n    citizens = Citizen.get_all()\\\\n    \\\\n    for citizen in citizens:\\\\n        eligibility = check_benefit_eligibility(citizen.id)\\\\n        \\\\n        if eligibility[\\\\\\"eligible\\\\\\"]:\\\\n            benefit_amount = calculate_benefit_amount(citizen.id)\\\\n            \\\\n            # Create benefit transfer\\\\n            benefit_instrument = Instrument.get_by_name(\\\\\\"Service Credit\\\\\\")\\\\n            system_user = User.get(\\\\\\"system\\\\\\")\\\\n            \\\\n            if benefit_instrument and system_user and citizen.user:\\\\n                transfer = Transfer(\\\\n                    from_user=system_user,\\\\n                    to_user=citizen.user,\\\\n                    instrument=benefit_instrument,\\\\n                    amount=benefit_amount\\\\n                )\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"citizen_id\\\\\\": citizen.id,\\\\n                    \\\\\\"benefit_amount\\\\\\": benefit_amount,\\\\n                    \\\\\\"status\\\\\\": \\\\\\"distributed\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = distribute_social_benefits()\\\\n    print(f\\\\\\"Benefits distribution completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:19.465\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:19.465\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"3\\", \\"name\\": \\"tax_collection_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nTax Collection Automation Codex\\\\nAutomatically calculates and processes tax payments for citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate tax owed by a user for a given year\\\\\\"\\\\\\"\\\\\\"\\\\n    if tax_year is None:\\\\n        tax_year = datetime.now().year\\\\n    \\\\n    # Get user\'s transfers for the tax year\\\\n    user = User.get(user_id)\\\\n    if not user:\\\\n        return {\\\\\\"error\\\\\\": \\\\\\"User not found\\\\\\"}\\\\n    \\\\n    # Calculate income from transfers received\\\\n    income_transfers = [t for t in user.transfers_to if \\\\n                       datetime.fromisoformat(t.created_at).year == tax_year]\\\\n    \\\\n    total_income = sum(t.amount for t in income_transfers)\\\\n    \\\\n    # Progressive tax calculation\\\\n    if total_income <= 10000:\\\\n        tax_rate = 0.10\\\\n    elif total_income <= 50000:\\\\n        tax_rate = 0.20\\\\n    else:\\\\n        tax_rate = 0.30\\\\n    \\\\n    tax_owed = int(total_income * tax_rate)\\\\n    \\\\n    return {\\\\n        \\\\\\"user_id\\\\\\": user_id,\\\\n        \\\\\\"tax_year\\\\\\": tax_year,\\\\n        \\\\\\"total_income\\\\\\": total_income,\\\\n        \\\\\\"tax_rate\\\\\\": tax_rate,\\\\n        \\\\\\"tax_owed\\\\\\": tax_owed,\\\\n        \\\\\\"calculated_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef process_tax_collection():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main tax collection process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all users\\\\n    users = User.get_all()\\\\n    \\\\n    for user in users:\\\\n        if user.id == \\\\\\"system\\\\\\":\\\\n            continue\\\\n            \\\\n        tax_info = calculate_tax_for_user(user.id)\\\\n        \\\\n        if \\\\\\"error\\\\\\" not in tax_info and tax_info[\\\\\\"tax_owed\\\\\\"] > 0:\\\\n            # Create tax payment transfer\\\\n            tax_instrument = Instrument.get_by_name(\\\\\\"Realm Token\\\\\\")\\\\n            if tax_instrument:\\\\n                transfer = Transfer(\\\\n                    from_user=user,\\\\n                    to_user=User.get(\\\\\\"system\\\\\\"),\\\\n                    instrument=tax_instrument,\\\\n                    amount=tax_info[\\\\\\"tax_owed\\\\\\"]\\\\n                )\\\\n                results.append({\\\\n                    \\\\\\"user_id\\\\\\": user.id,\\\\n                    \\\\\\"tax_collected\\\\\\": tax_info[\\\\\\"tax_owed\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": \\\\\\"collected\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = process_tax_collection()\\\\n    print(f\\\\\\"Tax collection completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 3 items
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.codex.Codex'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Codex", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Codex", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:16.617\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:16.617\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"1\\", \\"name\\": \\"governance_automation_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nGovernance Automation Codex\\\\nProcesses proposals and votes for democratic governance\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import Proposal, Vote, User\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef create_sample_proposal(title: str, description: str) -> str:\\\\n    \\\\\\"\\\\\\"\\\\\\"Create a new governance proposal\\\\\\"\\\\\\"\\\\\\"\\\\n    proposal = Proposal(\\\\n        metadata=json.dumps({\\\\n            \\\\\\"title\\\\\\": title,\\\\n            \\\\\\"description\\\\\\": description,\\\\n            \\\\\\"status\\\\\\": \\\\\\"active\\\\\\",\\\\n            \\\\\\"created_by\\\\\\": \\\\\\"system\\\\\\",\\\\n            \\\\\\"voting_deadline\\\\\\": (datetime.now() + timedelta(days=7)).isoformat(),\\\\n            \\\\\\"votes_for\\\\\\": 0,\\\\n            \\\\\\"votes_against\\\\\\": 0,\\\\n            \\\\\\"total_votes\\\\\\": 0\\\\n        })\\\\n    )\\\\n    \\\\n    return proposal.id\\\\n\\\\ndef process_votes():\\\\n    \\\\\\"\\\\\\"\\\\\\"Process all active proposals and tally votes\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all proposals\\\\n    proposals = Proposal.get_all()\\\\n    \\\\n    for proposal in proposals:\\\\n        metadata = json.loads(proposal.metadata)\\\\n        \\\\n        if metadata.get(\\\\\\"status\\\\\\") == \\\\\\"active\\\\\\":\\\\n            # Check if voting deadline has passed\\\\n            deadline = datetime.fromisoformat(metadata[\\\\\\"voting_deadline\\\\\\"])\\\\n            \\\\n            if datetime.now() > deadline:\\\\n                # Tally votes and close proposal\\\\n                votes_for = metadata.get(\\\\\\"votes_for\\\\\\", 0)\\\\n                votes_against = metadata.get(\\\\\\"votes_against\\\\\\", 0)\\\\n                total_votes = votes_for + votes_against\\\\n                \\\\n                # Determine outcome\\\\n                if total_votes > 0:\\\\n                    if votes_for > votes_against:\\\\n                        status = \\\\\\"passed\\\\\\"\\\\n                    else:\\\\n                        status = \\\\\\"rejected\\\\\\"\\\\n                else:\\\\n                    status = \\\\\\"no_votes\\\\\\"\\\\n                \\\\n                # Update proposal\\\\n                metadata[\\\\\\"status\\\\\\"] = status\\\\n                metadata[\\\\\\"final_tally\\\\\\"] = {\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against,\\\\n                    \\\\\\"total_votes\\\\\\": total_votes,\\\\n                    \\\\\\"closed_at\\\\\\": datetime.now().isoformat()\\\\n                }\\\\n                \\\\n                proposal.metadata = json.dumps(metadata)\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"proposal_id\\\\\\": proposal.id,\\\\n                    \\\\\\"title\\\\\\": metadata[\\\\\\"title\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": status,\\\\n                    \\\\\\"votes_for\\\\\\": votes_for,\\\\n                    \\\\\\"votes_against\\\\\\": votes_against\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\ndef create_sample_proposals():\\\\n    \\\\\\"\\\\\\"\\\\\\"Create sample governance proposals\\\\\\"\\\\\\"\\\\\\"\\\\n    proposals = [\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Increase Social Benefits by 10%\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Implement Green Energy Tax Credits\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Provide tax credits for citizens and organizations investing in renewable energy infrastructure.\\\\\\"\\\\n        },\\\\n        {\\\\n            \\\\\\"title\\\\\\": \\\\\\"Digital Identity Verification System\\\\\\",\\\\n            \\\\\\"description\\\\\\": \\\\\\"Implement a new digital identity verification system to streamline government services.\\\\\\"\\\\n        }\\\\n    ]\\\\n    \\\\n    created_proposals = []\\\\n    for proposal in proposals:\\\\n        proposal_id = create_sample_proposal(proposal[\\\\\\"title\\\\\\"], proposal[\\\\\\"description\\\\\\"])\\\\n        created_proposals.append(proposal_id)\\\\n    \\\\n    return created_proposals\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    # Create sample proposals\\\\n    proposals = create_sample_proposals()\\\\n    print(f\\\\\\"Created {len(proposals)} sample proposals\\\\\\")\\\\n    \\\\n    # Process votes\\\\n    results = process_votes()\\\\n    print(f\\\\\\"Processed {len(results)} proposals\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:18.048\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:18.048\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"2\\", \\"name\\": \\"social_benefits_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nSocial Benefits Distribution Codex\\\\nAutomatically distributes social benefits to eligible citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime\\\\nimport json\\\\n\\\\ndef check_benefit_eligibility(citizen_id: str) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Check if a citizen is eligible for social benefits\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return {\\\\\\"eligible\\\\\\": False, \\\\\\"reason\\\\\\": \\\\\\"Citizen not found\\\\\\"}\\\\n    \\\\n    # Eligibility criteria\\\\n    criteria = {\\\\n        \\\\\\"residence_permit\\\\\\": citizen.residence_permit == \\\\\\"valid\\\\\\",\\\\n        \\\\\\"tax_compliance\\\\\\": citizen.tax_compliance in [\\\\\\"compliant\\\\\\", \\\\\\"under_review\\\\\\"],\\\\n        \\\\\\"identity_verification\\\\\\": citizen.identity_verification == \\\\\\"verified\\\\\\",\\\\n        \\\\\\"benefits_eligibility\\\\\\": citizen.public_benefits_eligibility == \\\\\\"eligible\\\\\\"\\\\n    }\\\\n    \\\\n    eligible = all(criteria.values())\\\\n    \\\\n    return {\\\\n        \\\\\\"citizen_id\\\\\\": citizen_id,\\\\n        \\\\\\"eligible\\\\\\": eligible,\\\\n        \\\\\\"criteria_met\\\\\\": criteria,\\\\n        \\\\\\"checked_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef calculate_benefit_amount(citizen_id: str) -> int:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate benefit amount based on citizen status\\\\\\"\\\\\\"\\\\\\"\\\\n    citizen = Citizen.get(citizen_id)\\\\n    if not citizen:\\\\n        return 0\\\\n    \\\\n    # Base benefit amount\\\\n    base_amount = 500\\\\n    \\\\n    # Adjustments based on status\\\\n    if citizen.criminal_record == \\\\\\"clean\\\\\\":\\\\n        base_amount += 100\\\\n    \\\\n    if citizen.voting_eligibility == \\\\\\"eligible\\\\\\":\\\\n        base_amount += 50\\\\n    \\\\n    return base_amount\\\\n\\\\ndef distribute_social_benefits():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main social benefits distribution process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all citizens\\\\n    citizens = Citizen.get_all()\\\\n    \\\\n    for citizen in citizens:\\\\n        eligibility = check_benefit_eligibility(citizen.id)\\\\n        \\\\n        if eligibility[\\\\\\"eligible\\\\\\"]:\\\\n            benefit_amount = calculate_benefit_amount(citizen.id)\\\\n            \\\\n            # Create benefit transfer\\\\n            benefit_instrument = Instrument.get_by_name(\\\\\\"Service Credit\\\\\\")\\\\n            system_user = User.get(\\\\\\"system\\\\\\")\\\\n            \\\\n            if benefit_instrument and system_user and citizen.user:\\\\n                transfer = Transfer(\\\\n                    from_user=system_user,\\\\n                    to_user=citizen.user,\\\\n                    instrument=benefit_instrument,\\\\n                    amount=benefit_amount\\\\n                )\\\\n                \\\\n                results.append({\\\\n                    \\\\\\"citizen_id\\\\\\": citizen.id,\\\\n                    \\\\\\"benefit_amount\\\\\\": benefit_amount,\\\\n                    \\\\\\"status\\\\\\": \\\\\\"distributed\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = distribute_social_benefits()\\\\n    print(f\\\\\\"Benefits distribution completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 17:19:19.465\\", \\"timestamp_updated\\": \\"2025-09-15 17:19:19.465\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Codex\\", \\"_id\\": \\"3\\", \\"name\\": \\"tax_collection_codex\\", \\"code\\": \\"\\\\\\"\\\\\\"\\\\\\"\\\\nTax Collection Automation Codex\\\\nAutomatically calculates and processes tax payments for citizens\\\\n\\\\\\"\\\\\\"\\\\\\"\\\\n\\\\nfrom ggg import User, Transfer, Treasury, Instrument\\\\nfrom datetime import datetime, timedelta\\\\nimport json\\\\n\\\\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\\\\n    \\\\\\"\\\\\\"\\\\\\"Calculate tax owed by a user for a given year\\\\\\"\\\\\\"\\\\\\"\\\\n    if tax_year is None:\\\\n        tax_year = datetime.now().year\\\\n    \\\\n    # Get user\'s transfers for the tax year\\\\n    user = User.get(user_id)\\\\n    if not user:\\\\n        return {\\\\\\"error\\\\\\": \\\\\\"User not found\\\\\\"}\\\\n    \\\\n    # Calculate income from transfers received\\\\n    income_transfers = [t for t in user.transfers_to if \\\\n                       datetime.fromisoformat(t.created_at).year == tax_year]\\\\n    \\\\n    total_income = sum(t.amount for t in income_transfers)\\\\n    \\\\n    # Progressive tax calculation\\\\n    if total_income <= 10000:\\\\n        tax_rate = 0.10\\\\n    elif total_income <= 50000:\\\\n        tax_rate = 0.20\\\\n    else:\\\\n        tax_rate = 0.30\\\\n    \\\\n    tax_owed = int(total_income * tax_rate)\\\\n    \\\\n    return {\\\\n        \\\\\\"user_id\\\\\\": user_id,\\\\n        \\\\\\"tax_year\\\\\\": tax_year,\\\\n        \\\\\\"total_income\\\\\\": total_income,\\\\n        \\\\\\"tax_rate\\\\\\": tax_rate,\\\\n        \\\\\\"tax_owed\\\\\\": tax_owed,\\\\n        \\\\\\"calculated_at\\\\\\": datetime.now().isoformat()\\\\n    }\\\\n\\\\ndef process_tax_collection():\\\\n    \\\\\\"\\\\\\"\\\\\\"Main tax collection process\\\\\\"\\\\\\"\\\\\\"\\\\n    results = []\\\\n    \\\\n    # Get all users\\\\n    users = User.get_all()\\\\n    \\\\n    for user in users:\\\\n        if user.id == \\\\\\"system\\\\\\":\\\\n            continue\\\\n            \\\\n        tax_info = calculate_tax_for_user(user.id)\\\\n        \\\\n        if \\\\\\"error\\\\\\" not in tax_info and tax_info[\\\\\\"tax_owed\\\\\\"] > 0:\\\\n            # Create tax payment transfer\\\\n            tax_instrument = Instrument.get_by_name(\\\\\\"Realm Token\\\\\\")\\\\n            if tax_instrument:\\\\n                transfer = Transfer(\\\\n                    from_user=user,\\\\n                    to_user=User.get(\\\\\\"system\\\\\\"),\\\\n                    instrument=tax_instrument,\\\\n                    amount=tax_info[\\\\\\"tax_owed\\\\\\"]\\\\n                )\\\\n                results.append({\\\\n                    \\\\\\"user_id\\\\\\": user.id,\\\\n                    \\\\\\"tax_collected\\\\\\": tax_info[\\\\\\"tax_owed\\\\\\"],\\\\n                    \\\\\\"status\\\\\\": \\\\\\"collected\\\\\\"\\\\n                })\\\\n    \\\\n    return results\\\\n\\\\n# Main execution\\\\nif __name__ == \\\\\\"__main__\\\\\\":\\\\n    results = process_tax_collection()\\\\n    print(f\\\\\\"Tax collection completed: {len(results)} payments processed\\\\\\")\\\\n\\", \\"url\\": null, \\"checksum\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "3",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 17:19:16.617', 'timestamp_updated': '2025-09-15 17:19:16.617', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '1', 'name': 'governance_automation_codex', 'code': '"""\nGovernance Automation Codex\nProcesses proposals and votes for democratic governance\n"""\n\nfrom ggg import Proposal, Vote, User\nfrom datetime import datetime, timedelta\nimport json\n\ndef create_sample_proposal(title: str, description: str) -> str:\n    """Create a new governance proposal"""\n    proposal = Proposal(\n        metadata=json.dumps({\n            "title": title,\n            "description": description,\n            "status": "active",\n            "created_by": "system",\n            "voting_deadline": (datetime.now() + timedelta(days=7)).isoformat(),\n            "votes_for": 0,\n            "votes_against": 0,\n            "total_votes": 0\n        })\n    )\n    \n    return proposal.id\n\ndef process_votes():\n    """Process all active proposals and tally votes"""\n    results = []\n    \n    # Get all proposals\n    proposals = Proposal.get_all()\n    \n    for proposal in proposals:\n        metadata = json.loads(proposal.metadata)\n        \n        if metadata.get("status") == "active":\n            # Check if voting deadline has passed\n            deadline = datetime.fromisoformat(metadata["voting_deadline"])\n            \n            if datetime.now() > deadline:\n                # Tally votes and close proposal\n                votes_for = metadata.get("votes_for", 0)\n                votes_against = metadata.get("votes_against", 0)\n                total_votes = votes_for + votes_against\n                \n                # Determine outcome\n                if total_votes > 0:\n                    if votes_for > votes_against:\n                        status = "passed"\n                    else:\n                        status = "rejected"\n                else:\n                    status = "no_votes"\n                \n                # Update proposal\n                metadata["status"] = status\n                metadata["final_tally"] = {\n                    "votes_for": votes_for,\n                    "votes_against": votes_against,\n                    "total_votes": total_votes,\n                    "closed_at": datetime.now().isoformat()\n                }\n                \n                proposal.metadata = json.dumps(metadata)\n                \n                results.append({\n                    "proposal_id": proposal.id,\n                    "title": metadata["title"],\n                    "status": status,\n                    "votes_for": votes_for,\n                    "votes_against": votes_against\n                })\n    \n    return results\n\ndef create_sample_proposals():\n    """Create sample governance proposals"""\n    proposals = [\n        {\n            "title": "Increase Social Benefits by 10%",\n            "description": "Proposal to increase monthly social benefits for all eligible citizens by 10% to account for inflation."\n        },\n        {\n            "title": "Implement Green Energy Tax Credits",\n            "description": "Provide tax credits for citizens and organizations investing in renewable energy infrastructure."\n        },\n        {\n            "title": "Digital Identity Verification System",\n            "description": "Implement a new digital identity verification system to streamline government services."\n        }\n    ]\n    \n    created_proposals = []\n    for proposal in proposals:\n        proposal_id = create_sample_proposal(proposal["title"], proposal["description"])\n        created_proposals.append(proposal_id)\n    \n    return created_proposals\n\n# Main execution\nif __name__ == "__main__":\n    # Create sample proposals\n    proposals = create_sample_proposals()\n    print(f"Created {len(proposals)} sample proposals")\n    \n    # Process votes\n    results = process_votes()\n    print(f"Processed {len(results)} proposals")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:18.048', 'timestamp_updated': '2025-09-15 17:19:18.048', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '2', 'name': 'social_benefits_codex', 'code': '"""\nSocial Benefits Distribution Codex\nAutomatically distributes social benefits to eligible citizens\n"""\n\nfrom ggg import User, Citizen, Transfer, Treasury, Instrument\nfrom datetime import datetime\nimport json\n\ndef check_benefit_eligibility(citizen_id: str) -> dict:\n    """Check if a citizen is eligible for social benefits"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return {"eligible": False, "reason": "Citizen not found"}\n    \n    # Eligibility criteria\n    criteria = {\n        "residence_permit": citizen.residence_permit == "valid",\n        "tax_compliance": citizen.tax_compliance in ["compliant", "under_review"],\n        "identity_verification": citizen.identity_verification == "verified",\n        "benefits_eligibility": citizen.public_benefits_eligibility == "eligible"\n    }\n    \n    eligible = all(criteria.values())\n    \n    return {\n        "citizen_id": citizen_id,\n        "eligible": eligible,\n        "criteria_met": criteria,\n        "checked_at": datetime.now().isoformat()\n    }\n\ndef calculate_benefit_amount(citizen_id: str) -> int:\n    """Calculate benefit amount based on citizen status"""\n    citizen = Citizen.get(citizen_id)\n    if not citizen:\n        return 0\n    \n    # Base benefit amount\n    base_amount = 500\n    \n    # Adjustments based on status\n    if citizen.criminal_record == "clean":\n        base_amount += 100\n    \n    if citizen.voting_eligibility == "eligible":\n        base_amount += 50\n    \n    return base_amount\n\ndef distribute_social_benefits():\n    """Main social benefits distribution process"""\n    results = []\n    \n    # Get all citizens\n    citizens = Citizen.get_all()\n    \n    for citizen in citizens:\n        eligibility = check_benefit_eligibility(citizen.id)\n        \n        if eligibility["eligible"]:\n            benefit_amount = calculate_benefit_amount(citizen.id)\n            \n            # Create benefit transfer\n            benefit_instrument = Instrument.get_by_name("Service Credit")\n            system_user = User.get("system")\n            \n            if benefit_instrument and system_user and citizen.user:\n                transfer = Transfer(\n                    from_user=system_user,\n                    to_user=citizen.user,\n                    instrument=benefit_instrument,\n                    amount=benefit_amount\n                )\n                \n                results.append({\n                    "citizen_id": citizen.id,\n                    "benefit_amount": benefit_amount,\n                    "status": "distributed"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = distribute_social_benefits()\n    print(f"Benefits distribution completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}, {'timestamp_created': '2025-09-15 17:19:19.465', 'timestamp_updated': '2025-09-15 17:19:19.465', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Codex', '_id': '3', 'name': 'tax_collection_codex', 'code': '"""\nTax Collection Automation Codex\nAutomatically calculates and processes tax payments for citizens\n"""\n\nfrom ggg import User, Transfer, Treasury, Instrument\nfrom datetime import datetime, timedelta\nimport json\n\ndef calculate_tax_for_user(user_id: str, tax_year: int = None) -> dict:\n    """Calculate tax owed by a user for a given year"""\n    if tax_year is None:\n        tax_year = datetime.now().year\n    \n    # Get user\'s transfers for the tax year\n    user = User.get(user_id)\n    if not user:\n        return {"error": "User not found"}\n    \n    # Calculate income from transfers received\n    income_transfers = [t for t in user.transfers_to if \n                       datetime.fromisoformat(t.created_at).year == tax_year]\n    \n    total_income = sum(t.amount for t in income_transfers)\n    \n    # Progressive tax calculation\n    if total_income <= 10000:\n        tax_rate = 0.10\n    elif total_income <= 50000:\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.30\n    \n    tax_owed = int(total_income * tax_rate)\n    \n    return {\n        "user_id": user_id,\n        "tax_year": tax_year,\n        "total_income": total_income,\n        "tax_rate": tax_rate,\n        "tax_owed": tax_owed,\n        "calculated_at": datetime.now().isoformat()\n    }\n\ndef process_tax_collection():\n    """Main tax collection process"""\n    results = []\n    \n    # Get all users\n    users = User.get_all()\n    \n    for user in users:\n        if user.id == "system":\n            continue\n            \n        tax_info = calculate_tax_for_user(user.id)\n        \n        if "error" not in tax_info and tax_info["tax_owed"] > 0:\n            # Create tax payment transfer\n            tax_instrument = Instrument.get_by_name("Realm Token")\n            if tax_instrument:\n                transfer = Transfer(\n                    from_user=user,\n                    to_user=User.get("system"),\n                    instrument=tax_instrument,\n                    amount=tax_info["tax_owed"]\n                )\n                results.append({\n                    "user_id": user.id,\n                    "tax_collected": tax_info["tax_owed"],\n                    "status": "collected"\n                })\n    \n    return results\n\n# Main execution\nif __name__ == "__main__":\n    results = process_tax_collection()\n    print(f"Tax collection completed: {len(results)} payments processed")\n', 'url': None, 'checksum': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 3, 'total_pages': 1}
Loaded 3 items
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.dispute.Dispute'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("Dispute", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("Dispute", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"1\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"2\\", \\"status\\": \\"open\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.737\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"3\\", \\"status\\": \\"closed\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.737\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"4\\", \\"status\\": \\"open\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"5\\", \\"status\\": \\"investigating\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"6\\", \\"status\\": \\"resolved\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"7\\", \\"status\\": \\"appealed\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"8\\", \\"status\\": \\"resolved\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"9\\", \\"status\\": \\"open\\", \\"metadata\\": null}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.738\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.738\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"Dispute\\", \\"_id\\": \\"10\\", \\"status\\": \\"closed\\", \\"metadata\\": null}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "10",\n        "total_pages": "1"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '2', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '3', 'status': 'closed', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '4', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '5', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '6', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '7', 'status': 'appealed', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '8', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '9', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '10', 'status': 'closed', 'metadata': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 10, 'total_pages': 1}
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '1', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '2', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.737', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '3', 'status': 'closed', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.737', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '4', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '5', 'status': 'investigating', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '6', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '7', 'status': 'appealed', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '8', 'status': 'resolved', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '9', 'status': 'open', 'metadata': None}, {'timestamp_created': '2025-09-15 19:13:34.738', 'timestamp_updated': '2025-09-15 19:13:34.738', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'Dispute', '_id': '10', 'status': 'closed', 'metadata': None}], 'page_num': 0, 'page_size': 10, 'total_items_count': 10, 'total_pages': 1}
Loaded 10 items
handle_back_navigation
self.state.navigation_stack = []
handle_selection
self.state.view_mode = entity_list
refresh_data
self.state.view_mode = record_list
Fetching data for entity type: <class 'ggg.user.User'>
call_backend
cmd: dfx canister call --output json ulvla-h7777-77774-qaacq-cai get_objects_paginated ("User", 0, 10)
result: CompletedProcess(args=['dfx', 'canister', 'call', '--output', 'json', 'ulvla-h7777-77774-qaacq-cai', 'get_objects_paginated', '("User", 0, 10)'], returncode=0, stdout='{\n  "data": {\n    "objectsListPaginated": {\n      "objects": [\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.736\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"1\\", \\"id\\": \\"system\\", \\"profile_picture_url\\": null, \\"user_profile\\": \\"admin\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.729\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"2\\", \\"id\\": \\"user_000\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=683976\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.625\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.733\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"3\\", \\"id\\": \\"user_001\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=190437\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.656\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"4\\", \\"id\\": \\"user_002\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=931989\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.731\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"5\\", \\"id\\": \\"user_003\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=200036\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.729\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"6\\", \\"id\\": \\"user_004\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=613194\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.735\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"7\\", \\"id\\": \\"user_005\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=50527\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.626\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.728\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"8\\", \\"id\\": \\"user_006\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=283471\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.627\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.727\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"9\\", \\"id\\": \\"user_007\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=578745\\", \\"user_profile\\": \\"member\\"}",\n        "{\\"timestamp_created\\": \\"2025-09-15 19:13:34.627\\", \\"timestamp_updated\\": \\"2025-09-15 19:13:34.731\\", \\"creator\\": \\"system\\", \\"updater\\": \\"system\\", \\"owner\\": \\"system\\", \\"_type\\": \\"User\\", \\"_id\\": \\"10\\", \\"id\\": \\"user_008\\", \\"profile_picture_url\\": \\"https://api.dicebear.com/7.x/personas/svg?seed=136064\\", \\"user_profile\\": \\"member\\"}"\n      ],\n      "pagination": {\n        "page_num": "0",\n        "page_size": "10",\n        "total_items_count": "51",\n        "total_pages": "6"\n      }\n    }\n  },\n  "success": true\n}\n', stderr='')
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=683976', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.733', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=190437', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.656', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=931989', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=200036', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=613194', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.735', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=50527', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.728', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=283471', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.727', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=578745', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=136064', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Backend result: {'items': [{'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.736', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '1', 'id': 'system', 'profile_picture_url': None, 'user_profile': 'admin'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '2', 'id': 'user_000', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=683976', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.625', 'timestamp_updated': '2025-09-15 19:13:34.733', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '3', 'id': 'user_001', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=190437', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.656', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '4', 'id': 'user_002', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=931989', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '5', 'id': 'user_003', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=200036', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.729', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '6', 'id': 'user_004', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=613194', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.735', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '7', 'id': 'user_005', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=50527', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.626', 'timestamp_updated': '2025-09-15 19:13:34.728', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '8', 'id': 'user_006', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=283471', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.727', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '9', 'id': 'user_007', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=578745', 'user_profile': 'member'}, {'timestamp_created': '2025-09-15 19:13:34.627', 'timestamp_updated': '2025-09-15 19:13:34.731', 'creator': 'system', 'updater': 'system', 'owner': 'system', '_type': 'User', '_id': '10', 'id': 'user_008', 'profile_picture_url': 'https://api.dicebear.com/7.x/personas/svg?seed=136064', 'user_profile': 'member'}], 'page_num': 0, 'page_size': 10, 'total_items_count': 51, 'total_pages': 6}
Loaded 10 items
handle_selection
self.state.view_mode = record_list
self._relationship_cache = {}
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
handle_selection
self.state.view_mode = record_detail
handle_relationship_drilling
self.state.view_mode = record_detail
